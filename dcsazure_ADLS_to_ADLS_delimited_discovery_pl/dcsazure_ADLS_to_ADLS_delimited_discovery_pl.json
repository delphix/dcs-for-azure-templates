{
  "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "factoryName": {
      "type": "string",
      "metadata": "Data Factory name"
    },
    "Metadata Datastore": {
      "type": "string"
    },
    "AzureDataLakeStorage_Source": {
      "type": "string"
    },
    "ProdDCSForAzureService": {
      "type": "string"
    }
  },
  "variables": {
    "factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
  },
  "resources": [
    {
      "name": "[concat(parameters('factoryName'), '/dcsazure_ADLS_to_ADLS_delimited_discovery_pl')]",
      "type": "Microsoft.DataFactory/factories/pipelines",
      "apiVersion": "2018-06-01",
      "properties": {
        "description": "The storage account is set to a DCS_PLACEHOLDER, please make sure you update it to actual storage account name before publishing this pipeline",
        "activities": [
          {
            "name": "Check If We Should Rediscover Data",
            "type": "IfCondition",
            "dependsOn": [],
            "userProperties": [],
            "typeProperties": {
              "expression": {
                "value": "@pipeline().parameters.P_REDISCOVER",
                "type": "Expression"
              },
              "ifTrueActivities": [
                {
                  "name": "Mark Tables Undiscovered",
                  "description": "Mark all tables in this database and schema as undiscovered so that we can re-discover sensitive data in them",
                  "type": "Script",
                  "dependsOn": [],
                  "policy": {
                    "timeout": "0.12:00:00",
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                  },
                  "userProperties": [],
                  "linkedServiceName": {
                    "referenceName": "[parameters('Metadata Datastore')]",
                    "type": "LinkedServiceReference"
                  },
                  "typeProperties": {
                    "scripts": [
                      {
                        "type": "Query",
                        "text": {
                          "value": "UPDATE @{variables('METADATA_SCHEMA')}.@{variables('METADATA_RULESET_TABLE')}\nSET discovery_complete = CAST(0 AS BIT)\nWHERE\n    LOWER(dataset) = LOWER('@{variables('DATASET')}')\n    AND LOWER(specified_database) = LOWER('@{pipeline().parameters.P_STORAGE_CONTAINER_TO_SCAN}')\n    AND LOWER(specified_schema) LIKE LOWER('@{pipeline().parameters.P_DIRECTORY}%')",
                          "type": "Expression"
                        }
                      }
                    ],
                    "scriptBlockExecutionTimeout": "02:00:00"
                  }
                }
              ]
            }
          },
          {
            "name": "For Each Homogenous Schemas",
            "type": "ForEach",
            "dependsOn": [
              {
                "activity": "Filter Homogenous",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "userProperties": [],
            "typeProperties": {
              "items": {
                "value": "@activity('Filter Homogenous').output.Value",
                "type": "Expression"
              },
              "isSequential": false,
              "batchCount": 50,
              "activities": [
                {
                  "name": "Get Files Under Homogenous Schemas",
                  "type": "ExecutePipeline",
                  "dependsOn": [],
                  "policy": {
                    "secureInput": false
                  },
                  "userProperties": [],
                  "typeProperties": {
                    "pipeline": {
                      "referenceName": "dcsazure_ADLS_to_ADLS_delimited_file_discovery_pl",
                      "type": "PipelineReference"
                    },
                    "waitOnCompletion": true,
                    "parameters": {
                      "P_STORAGE_CONTAINER": {
                        "value": "@pipeline().parameters.P_STORAGE_CONTAINER_TO_SCAN",
                        "type": "Expression"
                      },
                      "P_STORAGE_ACCOUNT": {
                        "value": "@variables('STORAGE_ACCOUNT')",
                        "type": "Expression"
                      },
                      "P_DIRECTORY": {
                        "value": "@item()",
                        "type": "Expression"
                      },
                      "P_MAX_RESULTS": {
                        "value": "@variables('MAX_RESULTS')",
                        "type": "Expression"
                      },
                      "P_MSFT_API_VERSION": {
                        "value": "@variables('MSFT_API_VERSION')",
                        "type": "Expression"
                      },
                      "P_MSFT_BLOB_TYPE": {
                        "value": "@variables('MSFT_BLOB_TYPE')",
                        "type": "Expression"
                      }
                    }
                  }
                },
                {
                  "name": "If Has CSV Files",
                  "type": "IfCondition",
                  "dependsOn": [
                    {
                      "activity": "Get Files Under Homogenous Schemas",
                      "dependencyConditions": [
                        "Succeeded"
                      ]
                    }
                  ],
                  "userProperties": [],
                  "typeProperties": {
                    "expression": {
                      "value": "@greater(length(activity('Get Files Under Homogenous Schemas').output.pipelineReturnValue.CSV), 0)",
                      "type": "Expression"
                    },
                    "ifTrueActivities": [
                      {
                        "name": "Discover Structure For CSV",
                        "description": "This will get the schema of the first csv file in the file list",
                        "type": "ExecutePipeline",
                        "dependsOn": [],
                        "policy": {
                          "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                          "pipeline": {
                            "referenceName": "dcsazure_ADLS_to_ADLS_delimited_file_schema_discovery_pl",
                            "type": "PipelineReference"
                          },
                          "waitOnCompletion": true,
                          "parameters": {
                            "P_METADATA_SCHEMA": {
                              "value": "@variables('METADATA_SCHEMA')",
                              "type": "Expression"
                            },
                            "P_METADATA_RULESET_TABLE": {
                              "value": "@variables('METADATA_RULESET_TABLE')",
                              "type": "Expression"
                            },
                            "P_STORAGE_CONTAINER": {
                              "value": "@pipeline().parameters.P_STORAGE_CONTAINER_TO_SCAN",
                              "type": "Expression"
                            },
                            "P_DIRECTORY": {
                              "value": "@if(\n    contains(\n        activity('Get Files Under Homogenous Schemas').output.pipelineReturnValue.CSV[0], \n        '/'\n    ),\n    substring(\n        activity('Get Files Under Homogenous Schemas').output.pipelineReturnValue.CSV[0], \n        0, \n        lastIndexOf(\n            activity('Get Files Under Homogenous Schemas').output.pipelineReturnValue.CSV[0], \n            '/'\n        )\n    ),\n    ''\n)\n\n",
                              "type": "Expression"
                            },
                            "P_SUFFIX": {
                              "value": "csv",
                              "type": "Expression"
                            },
                            "P_COLUMN_DELIMITER": {
                              "value": "@pipeline().parameters.P_SUFFIX_DELIMITER_MAP.csv.column_delimiter",
                              "type": "Expression"
                            },
                            "P_COLUMNS_FROM_ADLS_FILE_STRUCTURE_PROCEDURE_NAME": {
                              "value": "@variables('COLUMNS_FROM_ADLS_FILE_STRUCTURE_PROCEDURE_NAME')",
                              "type": "Expression"
                            },
                            "P_QUOTE_CHARACTER": {
                              "value": "@pipeline().parameters.P_SUFFIX_DELIMITER_MAP.csv.quote_character",
                              "type": "Expression"
                            },
                            "P_NULL_VALUE": {
                              "value": "@pipeline().parameters.P_SUFFIX_DELIMITER_MAP.csv.null_value",
                              "type": "Expression"
                            },
                            "P_ESCAPE_CHARACTER": {
                              "value": "@pipeline().parameters.P_SUFFIX_DELIMITER_MAP.csv.escape_character",
                              "type": "Expression"
                            },
                            "P_FILENAME": {
                              "value": "@last(split(activity('Get Files Under Homogenous Schemas').output.pipelineReturnValue.CSV[0], '/'))",
                              "type": "Expression"
                            },
                            "P_DATASET": {
                              "value": "@variables('DATASET')",
                              "type": "Expression"
                            }
                          }
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "If Has TXT Files",
                  "type": "IfCondition",
                  "dependsOn": [
                    {
                      "activity": "Get Files Under Homogenous Schemas",
                      "dependencyConditions": [
                        "Succeeded"
                      ]
                    }
                  ],
                  "userProperties": [],
                  "typeProperties": {
                    "expression": {
                      "value": "@greater(length(activity('Get Files Under Homogenous Schemas').output.pipelineReturnValue.TXT), 0)",
                      "type": "Expression"
                    },
                    "ifTrueActivities": [
                      {
                        "name": "Discover Structure For TXT file",
                        "description": "This will get the schema of the first txt file in the file list",
                        "type": "ExecutePipeline",
                        "dependsOn": [],
                        "policy": {
                          "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                          "pipeline": {
                            "referenceName": "dcsazure_ADLS_to_ADLS_delimited_file_schema_discovery_pl",
                            "type": "PipelineReference"
                          },
                          "waitOnCompletion": true,
                          "parameters": {
                            "P_METADATA_SCHEMA": {
                              "value": "@variables('METADATA_SCHEMA')",
                              "type": "Expression"
                            },
                            "P_METADATA_RULESET_TABLE": {
                              "value": "@variables('METADATA_RULESET_TABLE')",
                              "type": "Expression"
                            },
                            "P_STORAGE_CONTAINER": {
                              "value": "@pipeline().parameters.P_STORAGE_CONTAINER_TO_SCAN",
                              "type": "Expression"
                            },
                            "P_DIRECTORY": {
                              "value": "@if(\n    contains(\n        activity('Get Files Under Homogenous Schemas').output.pipelineReturnValue.TXT[0], \n        '/'\n    ),\n    substring(\n        activity('Get Files Under Homogenous Schemas').output.pipelineReturnValue.TXT[0], \n        0, \n        lastIndexOf(\n            activity('Get Files Under Homogenous Schemas').output.pipelineReturnValue.TXT[0], \n            '/'\n        )\n    ),\n    ''\n)\n\n",
                              "type": "Expression"
                            },
                            "P_SUFFIX": {
                              "value": "txt",
                              "type": "Expression"
                            },
                            "P_COLUMN_DELIMITER": {
                              "value": "@pipeline().parameters.P_SUFFIX_DELIMITER_MAP.txt.column_delimiter",
                              "type": "Expression"
                            },
                            "P_COLUMNS_FROM_ADLS_FILE_STRUCTURE_PROCEDURE_NAME": {
                              "value": "@variables('COLUMNS_FROM_ADLS_FILE_STRUCTURE_PROCEDURE_NAME')",
                              "type": "Expression"
                            },
                            "P_QUOTE_CHARACTER": {
                              "value": "@pipeline().parameters.P_SUFFIX_DELIMITER_MAP.txt.quote_character",
                              "type": "Expression"
                            },
                            "P_NULL_VALUE": {
                              "value": "@pipeline().parameters.P_SUFFIX_DELIMITER_MAP.txt.null_value",
                              "type": "Expression"
                            },
                            "P_ESCAPE_CHARACTER": {
                              "value": "@pipeline().parameters.P_SUFFIX_DELIMITER_MAP.txt.escape_character",
                              "type": "Expression"
                            },
                            "P_FILENAME": {
                              "value": "@last(split(activity('Get Files Under Homogenous Schemas').output.pipelineReturnValue.TXT[0], '/'))",
                              "type": "Expression"
                            },
                            "P_DATASET": {
                              "value": "@variables('DATASET')",
                              "type": "Expression"
                            }
                          }
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "If Has Files With NO_EXT",
                  "type": "IfCondition",
                  "dependsOn": [
                    {
                      "activity": "Get Files Under Homogenous Schemas",
                      "dependencyConditions": [
                        "Succeeded"
                      ]
                    }
                  ],
                  "userProperties": [],
                  "typeProperties": {
                    "expression": {
                      "value": "@greater(length(activity('Get Files Under Homogenous Schemas').output.pipelineReturnValue.NO_EXT), 0)",
                      "type": "Expression"
                    },
                    "ifTrueActivities": [
                      {
                        "name": "Discover Structure For NO_EXT",
                        "description": "This will get the schema of the first file with no .  in the name in the file list",
                        "type": "ExecutePipeline",
                        "dependsOn": [],
                        "policy": {
                          "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                          "pipeline": {
                            "referenceName": "dcsazure_ADLS_to_ADLS_delimited_file_schema_discovery_pl",
                            "type": "PipelineReference"
                          },
                          "waitOnCompletion": true,
                          "parameters": {
                            "P_METADATA_SCHEMA": {
                              "value": "@variables('METADATA_SCHEMA')",
                              "type": "Expression"
                            },
                            "P_METADATA_RULESET_TABLE": {
                              "value": "@variables('METADATA_RULESET_TABLE')",
                              "type": "Expression"
                            },
                            "P_STORAGE_CONTAINER": {
                              "value": "@pipeline().parameters.P_STORAGE_CONTAINER_TO_SCAN",
                              "type": "Expression"
                            },
                            "P_DIRECTORY": {
                              "value": "@if(\n    contains(\n        activity('Get Files Under Homogenous Schemas').output.pipelineReturnValue.NO_EXT[0], \n        '/'\n    ),\n    substring(\n        activity('Get Files Under Homogenous Schemas').output.pipelineReturnValue.NO_EXT[0], \n        0, \n        lastIndexOf(\n            activity('Get Files Under Homogenous Schemas').output.pipelineReturnValue.NO_EXT[0], \n            '/'\n        )\n    ),\n    ''\n)\n\n",
                              "type": "Expression"
                            },
                            "P_SUFFIX": {
                              "value": "NO_EXT",
                              "type": "Expression"
                            },
                            "P_COLUMN_DELIMITER": {
                              "value": "@pipeline().parameters.P_SUFFIX_DELIMITER_MAP.NO_EXT.column_delimiter",
                              "type": "Expression"
                            },
                            "P_COLUMNS_FROM_ADLS_FILE_STRUCTURE_PROCEDURE_NAME": {
                              "value": "@variables('COLUMNS_FROM_ADLS_FILE_STRUCTURE_PROCEDURE_NAME')",
                              "type": "Expression"
                            },
                            "P_QUOTE_CHARACTER": {
                              "value": "@pipeline().parameters.P_SUFFIX_DELIMITER_MAP.NO_EXT.quote_character",
                              "type": "Expression"
                            },
                            "P_NULL_VALUE": {
                              "value": "@pipeline().parameters.P_SUFFIX_DELIMITER_MAP.NO_EXT.null_value",
                              "type": "Expression"
                            },
                            "P_ESCAPE_CHARACTER": {
                              "value": "@pipeline().parameters.P_SUFFIX_DELIMITER_MAP.NO_EXT.escape_character",
                              "type": "Expression"
                            },
                            "P_FILENAME": {
                              "value": "@last(split(activity('Get Files Under Homogenous Schemas').output.pipelineReturnValue.NO_EXT[0], '/'))",
                              "type": "Expression"
                            },
                            "P_DATASET": {
                              "value": "@variables('DATASET')",
                              "type": "Expression"
                            }
                          }
                        }
                      }
                    ]
                  }
                }
              ]
            }
          },
          {
            "name": "Discover Directories",
            "type": "ExecutePipeline",
            "dependsOn": [
              {
                "activity": "Check If We Should Rediscover Data",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "policy": {
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "pipeline": {
                "referenceName": "dcsazure_ADLS_to_ADLS_delimited_container_and_directory_discovery_pl",
                "type": "PipelineReference"
              },
              "waitOnCompletion": true,
              "parameters": {
                "P_STORAGE_CONTAINER": {
                  "value": "@pipeline().parameters.P_STORAGE_CONTAINER_TO_SCAN",
                  "type": "Expression"
                },
                "P_STORAGE_ACCOUNT": {
                  "value": "@variables('STORAGE_ACCOUNT')",
                  "type": "Expression"
                },
                "P_DIRECTORY": {
                  "value": "@pipeline().parameters.P_DIRECTORY",
                  "type": "Expression"
                },
                "P_MAX_RESULTS": {
                  "value": "@variables('MAX_RESULTS')",
                  "type": "Expression"
                },
                "P_DIRECTORIES_TO_EXCLUDE": {
                  "value": "@pipeline().parameters.P_DIRECTORIES_TO_EXCLUDE",
                  "type": "Expression"
                },
                "P_MAX_LEVELS_TO_RECURSE": {
                  "value": "@pipeline().parameters.P_MAX_LEVELS_TO_RECURSE",
                  "type": "Expression"
                },
                "P_MSFT_API_VERSION": {
                  "value": "@variables('MSFT_API_VERSION')",
                  "type": "Expression"
                },
                "P_MSFT_BLOB_TYPE": {
                  "value": "@variables('MSFT_BLOB_TYPE')",
                  "type": "Expression"
                }
              }
            }
          },
          {
            "name": "Filter Homogenous",
            "type": "Filter",
            "dependsOn": [
              {
                "activity": "Discover Directories",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "userProperties": [],
            "typeProperties": {
              "items": {
                "value": "@activity('Discover Directories').output.pipelineReturnValue.SCHEMAS",
                "type": "Expression"
              },
              "condition": {
                "value": "@not(contains(pipeline().parameters.P_SUB_DIRECTORY_WITH_MIXED_FILE_SCHEMAS, item()))",
                "type": "Expression"
              }
            }
          },
          {
            "name": "Filter Hetrogenous",
            "type": "Filter",
            "dependsOn": [
              {
                "activity": "Discover Directories",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "userProperties": [],
            "typeProperties": {
              "items": {
                "value": "@activity('Discover Directories').output.pipelineReturnValue.SCHEMAS",
                "type": "Expression"
              },
              "condition": {
                "value": "@contains(pipeline().parameters.P_SUB_DIRECTORY_WITH_MIXED_FILE_SCHEMAS, item())",
                "type": "Expression"
              }
            }
          },
          {
            "name": "For Discovered Tables",
            "type": "Lookup",
            "dependsOn": [
              {
                "activity": "For Each Homogenous Schemas",
                "dependencyConditions": [
                  "Succeeded"
                ]
              },
              {
                "activity": "For Each Hetrogenous  Schemas",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "policy": {
              "timeout": "0.12:00:00",
              "retry": 0,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "source": {
                "type": "AzureSqlSource",
                "sqlReaderQuery": {
                  "value": "SELECT DISTINCT\n    specified_database,\n    specified_schema,\n    identified_table\nFROM @{variables('METADATA_SCHEMA')}.@{variables('METADATA_RULESET_TABLE')}\nWHERE\nLOWER(dataset) = LOWER('@{variables('DATASET')}')\nAND LOWER(specified_database) = LOWER('@{pipeline().parameters.P_STORAGE_CONTAINER_TO_SCAN}')\nAND LOWER(specified_schema) LIKE '@{pipeline().parameters.P_DIRECTORY}%'\nAND (discovery_complete IS NULL OR discovery_complete = 0)\nORDER BY identified_table",
                  "type": "Expression"
                },
                "queryTimeout": "02:00:00",
                "partitionOption": "None"
              },
              "dataset": {
                "referenceName": "dcsazure_ADLS_to_ADLS_delimited_metadata_discovery_ds",
                "type": "DatasetReference",
                "parameters": {
                  "DS_METADATA_SCHEMA": {
                    "value": "@variables('METADATA_SCHEMA')",
                    "type": "Expression"
                  },
                  "DS_METADATA_TABLE": {
                    "value": "@variables('METADATA_RULESET_TABLE')",
                    "type": "Expression"
                  }
                }
              },
              "firstRowOnly": false
            }
          },
          {
            "name": "For Each Table",
            "type": "ForEach",
            "dependsOn": [
              {
                "activity": "For Discovered Tables",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "userProperties": [],
            "typeProperties": {
              "items": {
                "value": "@activity('For Discovered Tables').output.value",
                "type": "Expression"
              },
              "activities": [
                {
                  "name": "Discover Sensitive Data",
                  "type": "ExecuteDataFlow",
                  "dependsOn": [
                    {
                      "activity": "Get Source Metadata",
                      "dependencyConditions": [
                        "Succeeded"
                      ]
                    }
                  ],
                  "policy": {
                    "timeout": "0.12:00:00",
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                  },
                  "userProperties": [],
                  "typeProperties": {
                    "dataflow": {
                      "referenceName": "dcsazure_ADLS_to_ADLS_delimited_data_discovery_df",
                      "type": "DataFlowReference",
                      "parameters": {
                        "runId": {
                          "value": "'@{pipeline().RunId}'",
                          "type": "Expression"
                        },
                        "DF_NUM_ROWS_TO_PROFILE": {
                          "value": "@variables('NUMBER_OF_ROWS_TO_PROFILE')",
                          "type": "Expression"
                        },
                        "DF_METADATA_SCHEMA": {
                          "value": "'@{variables('METADATA_SCHEMA')}'",
                          "type": "Expression"
                        },
                        "DF_METADATA_RULESET_TABLE": {
                          "value": "'@{variables('METADATA_RULESET_TABLE')}'",
                          "type": "Expression"
                        },
                        "DF_DATASET": {
                          "value": "'@{variables('DATASET')}'",
                          "type": "Expression"
                        },
                        "DF_SOURCE_CONTAINER": {
                          "value": "'@{item().specified_database}'",
                          "type": "Expression"
                        },
                        "DF_COLUMN_DELIMITER": {
                          "value": "'@{json(activity('Get Source Metadata').output.firstRow.source_metadata).column_delimiter}'",
                          "type": "Expression"
                        },
                        "DF_QUOTE_CHARACTER": {
                          "value": "'@{json(activity('Get Source Metadata').output.firstRow.source_metadata).quote_character}'",
                          "type": "Expression"
                        },
                        "DF_ESCAPE_CHARACTER": {
                          "value": "'@{json(activity('Get Source Metadata').output.firstRow.source_metadata).escape_character}'",
                          "type": "Expression"
                        },
                        "DF_NULL_VALUE": {
                          "value": "'@{json(activity('Get Source Metadata').output.firstRow.source_metadata).null_value}'",
                          "type": "Expression"
                        },
                        "DF_SCHEMA": {
                          "value": "'@{item().specified_schema}'",
                          "type": "Expression"
                        },
                        "DF_TABLE": {
                          "value": "'@{item().identified_table}'",
                          "type": "Expression"
                        }
                      },
                      "datasetParameters": {
                        "SourceData1MillRowDataSampling": {},
                        "MetadataStoreRead": {},
                        "WriteToMetadataStore": {}
                      }
                    },
                    "staging": {},
                    "compute": {
                      "coreCount": 8,
                      "computeType": "General"
                    },
                    "traceLevel": "Fine"
                  }
                },
                {
                  "name": "Get Source Metadata",
                  "type": "Lookup",
                  "dependsOn": [],
                  "policy": {
                    "timeout": "0.12:00:00",
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                  },
                  "userProperties": [],
                  "typeProperties": {
                    "source": {
                      "type": "AzureSqlSource",
                      "sqlReaderQuery": {
                        "value": "SELECT TOP 1 source_metadata\nFROM @{variables('METADATA_SCHEMA')}.@{variables('METADATA_RULESET_TABLE')}\nWHERE dataset = '@{variables('DATASET')}'\n    AND specified_database = '@{item().specified_database}'\n    AND specified_schema = '@{item().specified_schema}'\n    AND identified_table = '@{item().identified_table}'",
                        "type": "Expression"
                      },
                      "queryTimeout": "02:00:00",
                      "partitionOption": "None"
                    },
                    "dataset": {
                      "referenceName": "dcsazure_ADLS_to_ADLS_delimited_metadata_discovery_ds",
                      "type": "DatasetReference",
                      "parameters": {
                        "DS_METADATA_SCHEMA": {
                          "value": "@variables('METADATA_SCHEMA')",
                          "type": "Expression"
                        },
                        "DS_METADATA_TABLE": {
                          "value": "@variables('METADATA_RULESET_TABLE')",
                          "type": "Expression"
                        }
                      }
                    }
                  }
                },
                {
                  "name": "Update Discovery State",
                  "type": "SqlServerStoredProcedure",
                  "dependsOn": [
                    {
                      "activity": "Discover Sensitive Data",
                      "dependencyConditions": [
                        "Succeeded"
                      ]
                    }
                  ],
                  "policy": {
                    "timeout": "0.12:00:00",
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                  },
                  "userProperties": [],
                  "typeProperties": {
                    "storedProcedureName": {
                      "value": "@{variables('METADATA_SCHEMA')}.@{variables('METADATA_EVENT_PROCEDURE_NAME')}",
                      "type": "Expression"
                    },
                    "storedProcedureParameters": {
                      "activity_run_id": {
                        "value": {
                          "value": "@activity('Discover Sensitive Data').ActivityRunId",
                          "type": "Expression"
                        },
                        "type": "Guid"
                      },
                      "error_message": {
                        "value": null,
                        "type": "String"
                      },
                      "execution_end_time": {
                        "value": {
                          "value": "@activity('Discover Sensitive Data').ExecutionEndTime",
                          "type": "Expression"
                        },
                        "type": "DateTime"
                      },
                      "execution_start_time": {
                        "value": {
                          "value": "@activity('Discover Sensitive Data').ExecutionStartTime",
                          "type": "Expression"
                        },
                        "type": "DateTime"
                      },
                      "input_parameters": {
                        "value": {
                          "value": "{\"DF_NUM_ROWS_TO_PROFILE\": @{variables('NUMBER_OF_ROWS_TO_PROFILE')}}",
                          "type": "Expression"
                        },
                        "type": "String"
                      },
                      "pipeline_name": {
                        "value": {
                          "value": "@pipeline().Pipeline",
                          "type": "Expression"
                        },
                        "type": "String"
                      },
                      "pipeline_run_id": {
                        "value": {
                          "value": "@pipeline().RunId",
                          "type": "Expression"
                        },
                        "type": "Guid"
                      },
                      "pipeline_success": {
                        "value": "true",
                        "type": "Boolean"
                      },
                      "source_database": {
                        "value": {
                          "value": "@item().specified_database",
                          "type": "Expression"
                        },
                        "type": "String"
                      },
                      "source_dataset": {
                        "value": {
                          "value": "@variables('DATASET')",
                          "type": "Expression"
                        },
                        "type": "String"
                      },
                      "source_metadata": {
                        "value": {
                          "value": "@activity('Get Source Metadata').output.firstRow.source_metadata",
                          "type": "Expression"
                        },
                        "type": "String"
                      },
                      "source_schema": {
                        "value": {
                          "value": "@item().specified_schema",
                          "type": "Expression"
                        },
                        "type": "String"
                      },
                      "source_table": {
                        "value": {
                          "value": "@item().identified_table",
                          "type": "Expression"
                        },
                        "type": "String"
                      }
                    }
                  },
                  "linkedServiceName": {
                    "referenceName": "[parameters('Metadata Datastore')]",
                    "type": "LinkedServiceReference"
                  }
                },
                {
                  "name": "Fail After Updating Discovery State",
                  "type": "Fail",
                  "dependsOn": [
                    {
                      "activity": "Update Discovery State Failed",
                      "dependencyConditions": [
                        "Succeeded"
                      ]
                    }
                  ],
                  "userProperties": [],
                  "typeProperties": {
                    "message": {
                      "value": "Failed to discover @{item().identified_table}",
                      "type": "Expression"
                    },
                    "errorCode": "500"
                  }
                },
                {
                  "name": "Update Discovery State Failed",
                  "type": "SqlServerStoredProcedure",
                  "dependsOn": [
                    {
                      "activity": "Discover Sensitive Data",
                      "dependencyConditions": [
                        "Failed"
                      ]
                    }
                  ],
                  "policy": {
                    "timeout": "0.12:00:00",
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                  },
                  "userProperties": [],
                  "typeProperties": {
                    "storedProcedureName": {
                      "value": "@{variables('METADATA_SCHEMA')}.@{variables('METADATA_EVENT_PROCEDURE_NAME')}",
                      "type": "Expression"
                    },
                    "storedProcedureParameters": {
                      "activity_run_id": {
                        "value": {
                          "value": "@activity('Discover Sensitive Data').ActivityRunId",
                          "type": "Expression"
                        },
                        "type": "Guid"
                      },
                      "error_message": {
                        "value": {
                          "value": "@activity('Discover Sensitive Data').Error.message",
                          "type": "Expression"
                        },
                        "type": "String"
                      },
                      "execution_end_time": {
                        "value": {
                          "value": "@activity('Discover Sensitive Data').ExecutionEndTime",
                          "type": "Expression"
                        },
                        "type": "DateTime"
                      },
                      "execution_start_time": {
                        "value": {
                          "value": "@activity('Discover Sensitive Data').ExecutionStartTime",
                          "type": "Expression"
                        },
                        "type": "DateTime"
                      },
                      "input_parameters": {
                        "value": {
                          "value": "{\"DF_NUM_ROWS_TO_PROFILE\": @{variables('NUMBER_OF_ROWS_TO_PROFILE')}}",
                          "type": "Expression"
                        },
                        "type": "String"
                      },
                      "pipeline_name": {
                        "value": {
                          "value": "@pipeline().Pipeline",
                          "type": "Expression"
                        },
                        "type": "String"
                      },
                      "pipeline_run_id": {
                        "value": {
                          "value": "@pipeline().RunId",
                          "type": "Expression"
                        },
                        "type": "Guid"
                      },
                      "pipeline_success": {
                        "value": "false",
                        "type": "Boolean"
                      },
                      "source_database": {
                        "value": {
                          "value": "@item().specified_database",
                          "type": "Expression"
                        },
                        "type": "String"
                      },
                      "source_dataset": {
                        "value": {
                          "value": "@variables('DATASET')",
                          "type": "Expression"
                        },
                        "type": "String"
                      },
                      "source_metadata": {
                        "value": {
                          "value": "@activity('Get Source Metadata').output.firstRow.metadata",
                          "type": "Expression"
                        },
                        "type": "String"
                      },
                      "source_schema": {
                        "value": {
                          "value": "@item().specified_schema",
                          "type": "Expression"
                        },
                        "type": "String"
                      },
                      "source_table": {
                        "value": {
                          "value": "@item().identified_table",
                          "type": "Expression"
                        },
                        "type": "String"
                      }
                    }
                  },
                  "linkedServiceName": {
                    "referenceName": "[parameters('Metadata Datastore')]",
                    "type": "LinkedServiceReference"
                  }
                }
              ]
            }
          },
          {
            "name": "Determine All Heterogenous schema",
            "type": "Script",
            "dependsOn": [
              {
                "activity": "Filter Hetrogenous",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "policy": {
              "timeout": "0.12:00:00",
              "retry": 0,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "linkedServiceName": {
              "referenceName": "[parameters('Metadata Datastore')]",
              "type": "LinkedServiceReference"
            },
            "typeProperties": {
              "scripts": [
                {
                  "type": "Query",
                  "text": {
                    "value": "DECLARE @disambiguation_json NVARCHAR(MAX) = N'@{pipeline().parameters.P_MIXED_FILE_SCHEMA_DISAMBIGUATION}';\nDECLARE @heterogeneous_schemas_array NVARCHAR(MAX) = N'@{activity('Filter Hetrogenous').output.Value}';\nSELECT b.[value] AS sub_dir, a.[key] AS prefix, c.[value] AS suffix\nFROM OPENJSON(@disambiguation_json, '$') a\nCROSS APPLY OPENJSON(@heterogeneous_schemas_array, '$') b\nCROSS APPLY OPENJSON(a.[value], '$.suffixes') c;",
                    "type": "Expression"
                  }
                }
              ],
              "scriptBlockExecutionTimeout": "02:00:00"
            }
          },
          {
            "name": "For Each Hetrogenous  Schemas",
            "type": "ForEach",
            "dependsOn": [
              {
                "activity": "Determine All Heterogenous schema",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "userProperties": [],
            "typeProperties": {
              "items": {
                "value": "@if(\n    greater(\n        length(activity('Determine All Heterogenous schema').output.resultSets), \n        0\n    ),\n    activity('Determine All Heterogenous schema').output.resultSets[0].rows,\n    json('[]')\n)",
                "type": "Expression"
              },
              "isSequential": false,
              "activities": [
                {
                  "name": "Get Files Under Hetrogenous Schemas",
                  "type": "ExecutePipeline",
                  "dependsOn": [],
                  "policy": {
                    "secureInput": false
                  },
                  "userProperties": [],
                  "typeProperties": {
                    "pipeline": {
                      "referenceName": "dcsazure_ADLS_to_ADLS_delimited_file_discovery_pl",
                      "type": "PipelineReference"
                    },
                    "waitOnCompletion": true,
                    "parameters": {
                      "P_STORAGE_CONTAINER": {
                        "value": "@pipeline().parameters.P_STORAGE_CONTAINER_TO_SCAN",
                        "type": "Expression"
                      },
                      "P_STORAGE_ACCOUNT": {
                        "value": "@variables('STORAGE_ACCOUNT')",
                        "type": "Expression"
                      },
                      "P_DIRECTORY": {
                        "value": "@concat(item().sub_dir, item().prefix)",
                        "type": "Expression"
                      },
                      "P_MAX_RESULTS": {
                        "value": "@variables('MAX_RESULTS')",
                        "type": "Expression"
                      },
                      "P_MSFT_API_VERSION": {
                        "value": "@variables('MSFT_API_VERSION')",
                        "type": "Expression"
                      },
                      "P_MSFT_BLOB_TYPE": {
                        "value": "@variables('MSFT_BLOB_TYPE')",
                        "type": "Expression"
                      }
                    }
                  }
                },
                {
                  "name": "If Has Files",
                  "type": "IfCondition",
                  "dependsOn": [
                    {
                      "activity": "Get Files Under Hetrogenous Schemas",
                      "dependencyConditions": [
                        "Succeeded"
                      ]
                    }
                  ],
                  "userProperties": [],
                  "typeProperties": {
                    "expression": {
                      "value": "@greater(length(activity('Get Files Under Hetrogenous Schemas').output.pipelineReturnValue[item().suffix]) , 0)",
                      "type": "Expression"
                    },
                    "ifTrueActivities": [
                      {
                        "name": "Discover Structure",
                        "type": "ExecutePipeline",
                        "dependsOn": [],
                        "policy": {
                          "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                          "pipeline": {
                            "referenceName": "dcsazure_ADLS_to_ADLS_delimited_file_schema_discovery_pl",
                            "type": "PipelineReference"
                          },
                          "waitOnCompletion": true,
                          "parameters": {
                            "P_METADATA_SCHEMA": {
                              "value": "@variables('METADATA_SCHEMA')",
                              "type": "Expression"
                            },
                            "P_METADATA_RULESET_TABLE": {
                              "value": "@variables('METADATA_RULESET_TABLE')",
                              "type": "Expression"
                            },
                            "P_STORAGE_CONTAINER": {
                              "value": "@pipeline().parameters.P_STORAGE_CONTAINER_TO_SCAN",
                              "type": "Expression"
                            },
                            "P_DIRECTORY": {
                              "value": "@if(\n    empty(item().sub_dir), \n    '', \n    substring(\n        item().sub_dir, 0, lastIndexOf(item().sub_dir, '/')\n    )\n)",
                              "type": "Expression"
                            },
                            "P_SUFFIX": {
                              "value": "@item().suffix",
                              "type": "Expression"
                            },
                            "P_COLUMN_DELIMITER": {
                              "value": "@pipeline().parameters.P_SUFFIX_DELIMITER_MAP[item().suffix].column_delimiter",
                              "type": "Expression"
                            },
                            "P_COLUMNS_FROM_ADLS_FILE_STRUCTURE_PROCEDURE_NAME": {
                              "value": "@variables('COLUMNS_FROM_ADLS_FILE_STRUCTURE_PROCEDURE_NAME')",
                              "type": "Expression"
                            },
                            "P_PREFIX": {
                              "value": "@item().prefix",
                              "type": "Expression"
                            },
                            "P_QUOTE_CHARACTER": {
                              "value": "@pipeline().parameters.P_SUFFIX_DELIMITER_MAP[item().suffix].quote_character",
                              "type": "Expression"
                            },
                            "P_NULL_VALUE": {
                              "value": "@pipeline().parameters.P_SUFFIX_DELIMITER_MAP[item().suffix].null_value",
                              "type": "Expression"
                            },
                            "P_ESCAPE_CHARACTER": {
                              "value": "@pipeline().parameters.P_SUFFIX_DELIMITER_MAP[item().suffix].escape_character",
                              "type": "Expression"
                            },
                            "P_FILENAME": {
                              "value": "@last(\n    split(\n        activity('Get files under hetrogenous schemas').output.pipelineReturnValue[item().suffix][0], \n        '/'\n    )\n)",
                              "type": "Expression"
                            },
                            "P_DATASET": {
                              "value": "@variables('DATASET')",
                              "type": "Expression"
                            }
                          }
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        ],
        "policy": {
          "elapsedTimeMetric": {}
        },
        "parameters": {
          "P_STORAGE_CONTAINER_TO_SCAN": {
            "type": "String"
          },
          "P_DIRECTORY": {
            "type": "string"
          },
          "P_SUFFIXES_TO_SCAN": {
            "type": "array",
            "defaultValue": [
              "csv",
              "txt",
              "NO_EXT"
            ]
          },
          "P_SUFFIX_DELIMITER_MAP": {
            "type": "object",
            "defaultValue": {
              "csv": {
                "column_delimiter": ",",
                "quote_character": "\"",
                "escape_character": "\\",
                "null_value": ""
              },
              "txt": {
                "column_delimiter": "|",
                "quote_character": "\"",
                "escape_character": "\\",
                "null_value": ""
              },
              "NO_EXT": {
                "column_delimiter": "|",
                "quote_character": "\"",
                "escape_character": "\\",
                "null_value": ""
              }
            }
          },
          "P_SUB_DIRECTORY_WITH_MIXED_FILE_SCHEMAS": {
            "type": "array",
            "defaultValue": []
          },
          "P_MIXED_FILE_SCHEMA_DISAMBIGUATION": {
            "type": "object",
            "defaultValue": {
              "DCS_EXAMPLE_PREFIX": {
                "suffixes": [
                  "csv",
                  "txt",
                  "NO_EXT"
                ]
              }
            }
          },
          "P_REDISCOVER": {
            "type": "bool",
            "defaultValue": true
          },
          "P_DIRECTORIES_TO_EXCLUDE": {
            "type": "array",
            "defaultValue": []
          },
          "P_MAX_LEVELS_TO_RECURSE": {
            "type": "int",
            "defaultValue": 5
          }
        },
        "variables": {
          "METADATA_SCHEMA": {
            "type": "String",
            "defaultValue": "dbo"
          },
          "METADATA_RULESET_TABLE": {
            "type": "String",
            "defaultValue": "discovered_ruleset"
          },
          "COLUMNS_FROM_ADLS_FILE_STRUCTURE_PROCEDURE_NAME": {
            "type": "String",
            "defaultValue": "get_columns_from_delimited_file_structure_sp"
          },
          "DATASET": {
            "type": "String",
            "defaultValue": "ADLS-DELIMITED"
          },
          "METADATA_EVENT_PROCEDURE_NAME": {
            "type": "String",
            "defaultValue": "insert_adf_discovery_event"
          },
          "NUMBER_OF_ROWS_TO_PROFILE": {
            "type": "Integer",
            "defaultValue": 1000
          },
          "MAX_RESULTS": {
            "type": "Integer",
            "defaultValue": 5000
          },
          "MSFT_API_VERSION": {
            "type": "String",
            "defaultValue": "2021-08-06"
          },
          "MSFT_BLOB_TYPE": {
            "type": "String",
            "defaultValue": "BlockBlob"
          },
          "STORAGE_ACCOUNT": {
            "type": "String",
            "defaultValue": "DCS_PLACEHOLDER"
          }
        },
        "folder": {
          "name": "dcsazure_ADLS_to_ADLS_delimited"
        },
        "annotations": [],
        "lastPublishTime": "2025-04-09T09:43:03Z"
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/pipelines/dcsazure_ADLS_to_ADLS_delimited_container_and_directory_discovery_pl')]",
        "[concat(variables('factoryId'), '/datasets/dcsazure_ADLS_to_ADLS_delimited_metadata_discovery_ds')]",
        "[concat(variables('factoryId'), '/pipelines/dcsazure_ADLS_to_ADLS_delimited_file_discovery_pl')]",
        "[concat(variables('factoryId'), '/dataflows/dcsazure_ADLS_to_ADLS_delimited_data_discovery_df')]",
        "[concat(variables('factoryId'), '/pipelines/dcsazure_ADLS_to_ADLS_delimited_file_schema_discovery_pl')]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/dcsazure_ADLS_to_ADLS_delimited_container_and_directory_discovery_pl')]",
      "type": "Microsoft.DataFactory/factories/pipelines",
      "apiVersion": "2018-06-01",
      "properties": {
        "activities": [
          {
            "name": "Until Queue Is Empty",
            "type": "Until",
            "dependsOn": [
              {
                "activity": "Push Current Dir To Queue",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "userProperties": [],
            "typeProperties": {
              "expression": {
                "value": "@empty(variables('DIR_QUEUE'))",
                "type": "Expression"
              },
              "activities": [
                {
                  "name": "List Blobs",
                  "type": "WebActivity",
                  "dependsOn": [
                    {
                      "activity": "Set Directory To Traverse",
                      "dependencyConditions": [
                        "Succeeded"
                      ]
                    }
                  ],
                  "policy": {
                    "timeout": "0.12:00:00",
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                  },
                  "userProperties": [],
                  "typeProperties": {
                    "method": "GET",
                    "headers": {
                      "x-ms-version": {
                        "value": "@pipeline().parameters.P_MSFT_API_VERSION",
                        "type": "Expression"
                      },
                      "x-ms-blob-type": {
                        "value": "@pipeline().parameters.P_MSFT_BLOB_TYPE",
                        "type": "Expression"
                      }
                    },
                    "url": {
                      "value": "https://@{pipeline().parameters.P_STORAGE_ACCOUNT}.blob.core.windows.net/@{pipeline().parameters.P_STORAGE_CONTAINER}?&restype=container&comp=list&maxResults=@{pipeline().parameters.P_MAX_RESULTS}&marker=@{variables('NEXT_MARKER')}&delimiter=/&prefix=@{variables('CURRENT_PREFIX')}",
                      "type": "Expression"
                    },
                    "authentication": {
                      "type": "MSI",
                      "resource": "https://storage.azure.com/"
                    }
                  }
                },
                {
                  "name": "Set Directory To Traverse",
                  "type": "SetVariable",
                  "dependsOn": [
                    {
                      "activity": "Temp Save Directories",
                      "dependencyConditions": [
                        "Succeeded"
                      ]
                    }
                  ],
                  "policy": {
                    "secureOutput": false,
                    "secureInput": false
                  },
                  "userProperties": [],
                  "typeProperties": {
                    "variableName": "CURRENT_PREFIX",
                    "value": {
                      "value": "@if(\n    or(\n        endswith(string(variables('TEMP_DIR_QUEUE')[0]), '/'), \n        empty(variables('TEMP_DIR_QUEUE')[0])\n    ),\n    variables('TEMP_DIR_QUEUE')[0], \n    concat(variables('TEMP_DIR_QUEUE')[0], '/')\n)",
                      "type": "Expression"
                    }
                  }
                },
                {
                  "name": "Temp Save Directories",
                  "type": "SetVariable",
                  "dependsOn": [],
                  "policy": {
                    "secureOutput": false,
                    "secureInput": false
                  },
                  "userProperties": [],
                  "typeProperties": {
                    "variableName": "TEMP_DIR_QUEUE",
                    "value": {
                      "value": "@variables('DIR_QUEUE')",
                      "type": "Expression"
                    }
                  }
                },
                {
                  "name": "Update Next Marker",
                  "type": "SetVariable",
                  "dependsOn": [
                    {
                      "activity": "List Blobs",
                      "dependencyConditions": [
                        "Succeeded"
                      ]
                    }
                  ],
                  "policy": {
                    "secureOutput": false,
                    "secureInput": false
                  },
                  "userProperties": [],
                  "typeProperties": {
                    "variableName": "NEXT_MARKER",
                    "value": {
                      "value": "@if(\n    empty(\n        xpath(xml(activity('List Blobs').output.Response),\n        '//NextMarker/text()'\n        )\n    ), \n    '', \n    xpath(\n        xml(activity('List Blobs').output.Response),\n        '//NextMarker/text()')[0]\n)",
                      "type": "Expression"
                    }
                  }
                },
                {
                  "name": "If Has More Items In Current Directory",
                  "type": "IfCondition",
                  "dependsOn": [
                    {
                      "activity": "Update Next Marker",
                      "dependencyConditions": [
                        "Succeeded"
                      ]
                    },
                    {
                      "activity": "Filter Out Directories To Exclude",
                      "dependencyConditions": [
                        "Succeeded"
                      ]
                    }
                  ],
                  "userProperties": [],
                  "typeProperties": {
                    "expression": {
                      "value": "@not(empty(variables('NEXT_MARKER')))",
                      "type": "Expression"
                    },
                    "ifFalseActivities": [
                      {
                        "name": "False - Pop Current Directory And Push New Directories",
                        "type": "SetVariable",
                        "dependsOn": [],
                        "policy": {
                          "secureOutput": false,
                          "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                          "variableName": "DIR_QUEUE",
                          "value": {
                            "value": "@union(activity('Filter Out Directories To Exclude').output.Value, skip(variables('TEMP_DIR_QUEUE'), 1))",
                            "type": "Expression"
                          }
                        }
                      },
                      {
                        "name": "Add Processed Dir To Schema",
                        "type": "AppendVariable",
                        "dependsOn": [
                          {
                            "activity": "False - Pop Current Directory And Push New Directories",
                            "dependencyConditions": [
                              "Succeeded"
                            ]
                          }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                          "variableName": "ALL_SCHEMAS_FOUND",
                          "value": {
                            "value": "@variables('CURRENT_PREFIX')",
                            "type": "Expression"
                          }
                        }
                      }
                    ],
                    "ifTrueActivities": [
                      {
                        "name": "True - Push New Directories To Queue",
                        "type": "SetVariable",
                        "dependsOn": [],
                        "policy": {
                          "secureOutput": false,
                          "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                          "variableName": "DIR_QUEUE",
                          "value": {
                            "value": "@union(variables('TEMP_DIR_QUEUE'), activity('Filter Out Directories To Exclude').output.Value)",
                            "type": "Expression"
                          }
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "Fail To Fetch Blobs",
                  "description": "Fail the current iteration.",
                  "type": "Fail",
                  "dependsOn": [
                    {
                      "activity": "Empty Queue",
                      "dependencyConditions": [
                        "Succeeded"
                      ]
                    }
                  ],
                  "userProperties": [],
                  "typeProperties": {
                    "message": "Fail to fetch blobs",
                    "errorCode": "500"
                  }
                },
                {
                  "name": "Filter Out Directories To Exclude",
                  "description": "This is where we filter out directories that are too deeply nested.",
                  "type": "Filter",
                  "dependsOn": [
                    {
                      "activity": "List Blobs",
                      "dependencyConditions": [
                        "Succeeded"
                      ]
                    }
                  ],
                  "userProperties": [],
                  "typeProperties": {
                    "items": {
                      "value": "@xpath(xml(activity('List Blobs').output.Response), '//BlobPrefix/Name/text()')",
                      "type": "Expression"
                    },
                    "condition": {
                      "value": "@and(\n    not(contains(pipeline().parameters.P_DIRECTORIES_TO_EXCLUDE, item())), \n    lessOrEquals(\n        sub(length(split(item(), '/')), 1), \n        variables('MAX_LEVELS_TO_RECURSE')\n    )\n)",
                      "type": "Expression"
                    }
                  }
                },
                {
                  "name": "Empty Queue",
                  "type": "SetVariable",
                  "dependsOn": [
                    {
                      "activity": "List Blobs",
                      "dependencyConditions": [
                        "Failed"
                      ]
                    }
                  ],
                  "policy": {
                    "secureOutput": false,
                    "secureInput": false
                  },
                  "userProperties": [],
                  "typeProperties": {
                    "variableName": "DIR_QUEUE",
                    "value": {
                      "value": "@skip(variables('TEMP_DIR_QUEUE'), 1)",
                      "type": "Expression"
                    }
                  }
                }
              ],
              "timeout": "0.12:00:00"
            }
          },
          {
            "name": "Push Current Dir To Queue",
            "type": "SetVariable",
            "dependsOn": [
              {
                "activity": "Validate And Set Max Levels To Recurse",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "policy": {
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "variableName": "DIR_QUEUE",
              "value": {
                "value": "@createArray(pipeline().parameters.P_DIRECTORY)",
                "type": "Expression"
              }
            }
          },
          {
            "name": "Set Unique Schemas",
            "type": "SetVariable",
            "dependsOn": [
              {
                "activity": "Until Queue Is Empty",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "policy": {
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "variableName": "pipelineReturnValue",
              "value": [
                {
                  "key": "SCHEMAS",
                  "value": {
                    "type": "Expression",
                    "content": "@union(variables('ALL_SCHEMAS_FOUND'), variables('ALL_SCHEMAS_FOUND'))"
                  }
                }
              ],
              "setSystemVariable": true
            }
          },
          {
            "name": "Check If Specified Directory Is Valid",
            "type": "GetMetadata",
            "dependsOn": [],
            "policy": {
              "timeout": "0.12:00:00",
              "retry": 0,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "dataset": {
                "referenceName": "dcsazure_ADLS_to_ADLS_delimited_container_and_directory_discovery_ds",
                "type": "DatasetReference",
                "parameters": {
                  "DS_STORAGE_CONTAINER": {
                    "value": "@pipeline().parameters.P_STORAGE_CONTAINER",
                    "type": "Expression"
                  },
                  "DS_DIRECTORY": {
                    "value": "@pipeline().parameters.P_DIRECTORY",
                    "type": "Expression"
                  }
                }
              },
              "fieldList": [
                "exists"
              ],
              "storeSettings": {
                "type": "AzureBlobFSReadSettings",
                "recursive": true,
                "enablePartitionDiscovery": false
              },
              "formatSettings": {
                "type": "DelimitedTextReadSettings"
              }
            }
          },
          {
            "name": "Fail If Directory Does Not Exists",
            "type": "IfCondition",
            "dependsOn": [
              {
                "activity": "Check If Specified Directory Is Valid",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "userProperties": [],
            "typeProperties": {
              "expression": {
                "value": "@equals(activity('Check if specified directory is valid').output.exists, false)",
                "type": "Expression"
              },
              "ifTrueActivities": [
                {
                  "name": "Invalid Directory",
                  "type": "Fail",
                  "dependsOn": [],
                  "userProperties": [],
                  "typeProperties": {
                    "message": {
                      "value": "The directory @{pipeline().parameters.P_DIRECTORY} is an invalid blob",
                      "type": "Expression"
                    },
                    "errorCode": "400"
                  }
                }
              ]
            }
          },
          {
            "name": "Validate And Set Max Levels To Recurse",
            "description": "Validate that the specified level is greater than 0 and correctly set the level relative to the root level",
            "type": "IfCondition",
            "dependsOn": [
              {
                "activity": "Fail If Directory Does Not Exists",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "userProperties": [],
            "typeProperties": {
              "expression": {
                "value": "@less(pipeline().parameters.P_MAX_LEVELS_TO_RECURSE, 0)",
                "type": "Expression"
              },
              "ifFalseActivities": [
                {
                  "name": "Set Max Levels To Recurse",
                  "description": "Set the correct max levels to recursed starting at the specified directory",
                  "type": "SetVariable",
                  "dependsOn": [],
                  "policy": {
                    "secureOutput": false,
                    "secureInput": false
                  },
                  "userProperties": [],
                  "typeProperties": {
                    "variableName": "MAX_LEVELS_TO_RECURSE",
                    "value": {
                      "value": "@if(\n    empty(pipeline().parameters.P_DIRECTORY), \n    pipeline().parameters.P_MAX_LEVELS_TO_RECURSE, \n    if(\n        endswith(pipeline().parameters.P_DIRECTORY, '/'), \n        add(sub(length(split(pipeline().parameters.P_DIRECTORY, '/')), 1), pipeline().parameters.P_MAX_LEVELS_TO_RECURSE), \n        add(length(split(pipeline().parameters.P_DIRECTORY, '/')), pipeline().parameters.P_MAX_LEVELS_TO_RECURSE)\n    )\n)",
                      "type": "Expression"
                    }
                  }
                }
              ],
              "ifTrueActivities": [
                {
                  "name": "Invalid Recursion Level",
                  "description": "Fail if levels to recurse is less than 0",
                  "type": "Fail",
                  "dependsOn": [],
                  "userProperties": [],
                  "typeProperties": {
                    "message": {
                      "value": "The specified value of pipeline parameter P_MAX_LEVELS_TO_RECURSE=@{pipeline().parameters.P_MAX_LEVELS_TO_RECURSE} should be greater than or equal to 0",
                      "type": "Expression"
                    },
                    "errorCode": "400"
                  }
                }
              ]
            }
          }
        ],
        "policy": {
          "elapsedTimeMetric": {}
        },
        "parameters": {
          "P_STORAGE_CONTAINER": {
            "type": "string"
          },
          "P_STORAGE_ACCOUNT": {
            "type": "string"
          },
          "P_DIRECTORY": {
            "type": "string"
          },
          "P_MAX_RESULTS": {
            "type": "string",
            "defaultValue": "1000"
          },
          "P_DIRECTORIES_TO_EXCLUDE": {
            "type": "array",
            "defaultValue": []
          },
          "P_MAX_LEVELS_TO_RECURSE": {
            "type": "int",
            "defaultValue": 5
          },
          "P_MSFT_API_VERSION": {
            "type": "string",
            "defaultValue": "2021-08-06"
          },
          "P_MSFT_BLOB_TYPE": {
            "type": "string",
            "defaultValue": "BlockBlob"
          }
        },
        "variables": {
          "UNIQUE_SCHEMAS_FOUND": {
            "type": "Array",
            "defaultValue": []
          },
          "NEXT_MARKER": {
            "type": "String"
          },
          "DIR_QUEUE": {
            "type": "Array"
          },
          "ALL_SCHEMAS_FOUND": {
            "type": "Array"
          },
          "CURRENT_PREFIX": {
            "type": "String"
          },
          "TEMP_DIR_QUEUE": {
            "type": "Array"
          },
          "FILES": {
            "type": "Array"
          },
          "MAX_LEVELS_TO_RECURSE": {
            "type": "Integer"
          }
        },
        "folder": {
          "name": "dcsazure_ADLS_to_ADLS_delimited"
        },
        "annotations": [],
        "lastPublishTime": "2025-04-09T09:33:11Z"
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/datasets/dcsazure_ADLS_to_ADLS_delimited_container_and_directory_discovery_ds')]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/dcsazure_ADLS_to_ADLS_delimited_metadata_discovery_ds')]",
      "type": "Microsoft.DataFactory/factories/datasets",
      "apiVersion": "2018-06-01",
      "properties": {
        "linkedServiceName": {
          "referenceName": "[parameters('Metadata Datastore')]",
          "type": "LinkedServiceReference"
        },
        "parameters": {
          "DS_METADATA_SCHEMA": {
            "type": "string"
          },
          "DS_METADATA_TABLE": {
            "type": "string"
          }
        },
        "folder": {
          "name": "dcsazure_ADLS_to_ADLS_delimited"
        },
        "annotations": [],
        "type": "AzureSqlTable",
        "schema": [
          {
            "name": "dataset",
            "type": "varchar"
          },
          {
            "name": "specified_database",
            "type": "varchar"
          },
          {
            "name": "specified_schema",
            "type": "varchar"
          },
          {
            "name": "identified_table",
            "type": "varchar"
          },
          {
            "name": "identified_column",
            "type": "varchar"
          },
          {
            "name": "identified_column_type",
            "type": "varchar"
          },
          {
            "name": "identified_column_max_length",
            "type": "int",
            "precision": 10
          },
          {
            "name": "ordinal_position",
            "type": "int",
            "precision": 10
          },
          {
            "name": "row_count",
            "type": "bigint",
            "precision": 19
          },
          {
            "name": "metadata",
            "type": "nvarchar"
          },
          {
            "name": "profiled_domain",
            "type": "varchar"
          },
          {
            "name": "profiled_algorithm",
            "type": "varchar"
          },
          {
            "name": "confidence_score",
            "type": "decimal",
            "precision": 6,
            "scale": 5
          },
          {
            "name": "rows_profiled",
            "type": "bigint",
            "precision": 19
          },
          {
            "name": "assigned_algorithm",
            "type": "varchar"
          },
          {
            "name": "last_profiled_updated_timestamp",
            "type": "datetime",
            "precision": 23,
            "scale": 3
          }
        ],
        "typeProperties": {
          "schema": {
            "value": "@dataset().DS_METADATA_SCHEMA",
            "type": "Expression"
          },
          "table": {
            "value": "@dataset().DS_METADATA_TABLE",
            "type": "Expression"
          }
        }
      },
      "dependsOn": []
    },
    {
      "name": "[concat(parameters('factoryName'), '/dcsazure_ADLS_to_ADLS_delimited_file_discovery_pl')]",
      "type": "Microsoft.DataFactory/factories/pipelines",
      "apiVersion": "2018-06-01",
      "properties": {
        "activities": [
          {
            "name": "Until No More Blobs",
            "type": "Until",
            "dependsOn": [],
            "userProperties": [],
            "typeProperties": {
              "expression": {
                "value": "@empty(variables('NEXT_MARKER'))",
                "type": "Expression"
              },
              "activities": [
                {
                  "name": "List Blobs",
                  "type": "WebActivity",
                  "dependsOn": [
                    {
                      "activity": "Save Previous Blob List",
                      "dependencyConditions": [
                        "Succeeded"
                      ]
                    }
                  ],
                  "policy": {
                    "timeout": "0.12:00:00",
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                  },
                  "userProperties": [],
                  "typeProperties": {
                    "method": "GET",
                    "headers": {
                      "x-ms-version": {
                        "value": "@pipeline().parameters.P_MSFT_API_VERSION",
                        "type": "Expression"
                      },
                      "x-ms-blob-type": {
                        "value": "@pipeline().parameters.P_MSFT_BLOB_TYPE",
                        "type": "Expression"
                      }
                    },
                    "url": {
                      "value": "https://@{pipeline().parameters.P_STORAGE_ACCOUNT}.blob.core.windows.net/@{pipeline().parameters.P_STORAGE_CONTAINER}?&restype=container&comp=list&prefix=@{pipeline().parameters.P_DIRECTORY}&maxResults=@{pipeline().parameters.P_MAX_RESULTS}&delimiter=/&marker=@{variables('NEXT_MARKER')}",
                      "type": "Expression"
                    },
                    "authentication": {
                      "type": "MSI",
                      "resource": "https://storage.azure.com/"
                    }
                  }
                },
                {
                  "name": "Parse Response And Set Blob List",
                  "type": "SetVariable",
                  "dependsOn": [
                    {
                      "activity": "List Blobs",
                      "dependencyConditions": [
                        "Succeeded"
                      ]
                    }
                  ],
                  "policy": {
                    "secureOutput": false,
                    "secureInput": false
                  },
                  "userProperties": [],
                  "typeProperties": {
                    "variableName": "CURRENT_BLOB_LIST",
                    "value": {
                      "value": "@xpath(xml(activity('List Blobs').output.Response), '//Blob/Name/text()')",
                      "type": "Expression"
                    }
                  }
                },
                {
                  "name": "Update Next Marker",
                  "type": "SetVariable",
                  "dependsOn": [
                    {
                      "activity": "List Blobs",
                      "dependencyConditions": [
                        "Succeeded"
                      ]
                    }
                  ],
                  "policy": {
                    "secureOutput": false,
                    "secureInput": false
                  },
                  "userProperties": [],
                  "typeProperties": {
                    "variableName": "NEXT_MARKER",
                    "value": {
                      "value": "@if(\n    empty(\n        xpath(\n            xml(activity('List Blobs').output.Response), \n            '//NextMarker/text()'\n        )\n    ), \n    '', \n    xpath(\n        xml(activity('List Blobs').output.Response), \n    '//NextMarker/text()')[0]\n)",
                      "type": "Expression"
                    }
                  }
                },
                {
                  "name": "Save Previous Blob List",
                  "type": "SetVariable",
                  "dependsOn": [],
                  "policy": {
                    "secureOutput": false,
                    "secureInput": false
                  },
                  "userProperties": [],
                  "typeProperties": {
                    "variableName": "PREV_BLOB_LIST",
                    "value": {
                      "value": "@variables('BLOBS_LIST')",
                      "type": "Expression"
                    }
                  }
                },
                {
                  "name": "Update Blob List",
                  "type": "SetVariable",
                  "dependsOn": [
                    {
                      "activity": "Parse Response And Set Blob List",
                      "dependencyConditions": [
                        "Succeeded"
                      ]
                    }
                  ],
                  "policy": {
                    "secureOutput": false,
                    "secureInput": false
                  },
                  "userProperties": [],
                  "typeProperties": {
                    "variableName": "BLOBS_LIST",
                    "value": {
                      "value": "@union(variables('CURRENT_BLOB_LIST'), variables('PREV_BLOB_LIST'))",
                      "type": "Expression"
                    }
                  }
                }
              ],
              "timeout": "0.12:00:00"
            }
          },
          {
            "name": "Set Result",
            "type": "SetVariable",
            "dependsOn": [
              {
                "activity": "Filter CSV",
                "dependencyConditions": [
                  "Succeeded"
                ]
              },
              {
                "activity": "Filter TXT",
                "dependencyConditions": [
                  "Succeeded"
                ]
              },
              {
                "activity": "Filter NO_EXT",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "policy": {
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "variableName": "pipelineReturnValue",
              "value": [
                {
                  "key": "CSV",
                  "value": {
                    "type": "Expression",
                    "content": "@activity('Filter CSV').output.Value"
                  }
                },
                {
                  "key": "TXT",
                  "value": {
                    "type": "Expression",
                    "content": "@activity('Filter TXT').output.Value"
                  }
                },
                {
                  "key": "NO_EXT",
                  "value": {
                    "type": "Expression",
                    "content": "@activity('Filter NO_EXT').output.Value"
                  }
                }
              ],
              "setSystemVariable": true
            }
          },
          {
            "name": "Filter CSV",
            "type": "Filter",
            "dependsOn": [
              {
                "activity": "Until No More Blobs",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "userProperties": [],
            "typeProperties": {
              "items": {
                "value": "@variables('BLOBS_LIST')",
                "type": "Expression"
              },
              "condition": {
                "value": "@endswith(item(), '.csv')",
                "type": "Expression"
              }
            }
          },
          {
            "name": "Filter TXT",
            "type": "Filter",
            "dependsOn": [
              {
                "activity": "Until No More Blobs",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "userProperties": [],
            "typeProperties": {
              "items": {
                "value": "@variables('BLOBS_LIST')",
                "type": "Expression"
              },
              "condition": {
                "value": "@endswith(item(), '.txt')",
                "type": "Expression"
              }
            }
          },
          {
            "name": "Filter NO_EXT",
            "type": "Filter",
            "dependsOn": [
              {
                "activity": "Until No More Blobs",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "userProperties": [],
            "typeProperties": {
              "items": {
                "value": "@variables('BLOBS_LIST')",
                "type": "Expression"
              },
              "condition": {
                "value": "@not(contains(item(), '.'))",
                "type": "Expression"
              }
            }
          }
        ],
        "policy": {
          "elapsedTimeMetric": {}
        },
        "parameters": {
          "P_STORAGE_CONTAINER": {
            "type": "string"
          },
          "P_STORAGE_ACCOUNT": {
            "type": "string"
          },
          "P_DIRECTORY": {
            "type": "string"
          },
          "P_MAX_RESULTS": {
            "type": "string",
            "defaultValue": "1000"
          },
          "P_MSFT_API_VERSION": {
            "type": "string",
            "defaultValue": "2021-08-06"
          },
          "P_MSFT_BLOB_TYPE": {
            "type": "string",
            "defaultValue": "BlockBlob"
          }
        },
        "variables": {
          "BLOBS_LIST": {
            "type": "Array",
            "defaultValue": []
          },
          "NEXT_MARKER": {
            "type": "String"
          },
          "CURRENT_BLOB_LIST": {
            "type": "Array"
          },
          "PREV_BLOB_LIST": {
            "type": "Array"
          },
          "FILES": {
            "type": "Array"
          }
        },
        "folder": {
          "name": "dcsazure_ADLS_to_ADLS_delimited"
        },
        "annotations": [],
        "lastPublishTime": "2025-04-09T09:33:11Z"
      },
      "dependsOn": []
    },
    {
      "name": "[concat(parameters('factoryName'), '/dcsazure_ADLS_to_ADLS_delimited_container_and_directory_discovery_ds')]",
      "type": "Microsoft.DataFactory/factories/datasets",
      "apiVersion": "2018-06-01",
      "properties": {
        "linkedServiceName": {
          "referenceName": "[parameters('AzureDataLakeStorage_Source')]",
          "type": "LinkedServiceReference"
        },
        "parameters": {
          "DS_STORAGE_CONTAINER": {
            "type": "String"
          },
          "DS_DIRECTORY": {
            "type": "String"
          }
        },
        "folder": {
          "name": "dcsazure_ADLS_to_ADLS_delimited"
        },
        "annotations": [],
        "type": "DelimitedText",
        "typeProperties": {
          "location": {
            "type": "AzureBlobFSLocation",
            "folderPath": {
              "value": "@dataset().DS_DIRECTORY",
              "type": "Expression"
            },
            "fileSystem": {
              "value": "@dataset().DS_STORAGE_CONTAINER",
              "type": "Expression"
            }
          },
          "columnDelimiter": ",",
          "escapeChar": "\\",
          "firstRowAsHeader": true,
          "quoteChar": "\""
        },
        "schema": [
          {
            "type": "String"
          },
          {
            "type": "String"
          },
          {
            "type": "String"
          },
          {
            "type": "String"
          },
          {
            "type": "String"
          },
          {
            "type": "String"
          },
          {
            "type": "String"
          },
          {
            "type": "String"
          },
          {
            "type": "String"
          },
          {
            "type": "String"
          },
          {
            "type": "String"
          },
          {
            "type": "String"
          },
          {
            "type": "String"
          },
          {
            "type": "String"
          },
          {
            "type": "String"
          },
          {
            "type": "String"
          },
          {
            "type": "String"
          },
          {
            "type": "String"
          },
          {
            "type": "String"
          },
          {
            "type": "String"
          },
          {
            "type": "String"
          },
          {
            "type": "String"
          },
          {
            "type": "String"
          },
          {
            "type": "String"
          },
          {
            "type": "String"
          },
          {
            "type": "String"
          },
          {
            "type": "String"
          },
          {
            "type": "String"
          },
          {
            "type": "String"
          },
          {
            "type": "String"
          },
          {
            "type": "String"
          },
          {
            "type": "String"
          },
          {
            "type": "String"
          },
          {
            "type": "String"
          },
          {
            "type": "String"
          },
          {
            "type": "String"
          },
          {
            "type": "String"
          },
          {
            "type": "String"
          },
          {
            "type": "String"
          },
          {
            "type": "String"
          },
          {
            "type": "String"
          },
          {
            "type": "String"
          },
          {
            "type": "String"
          },
          {
            "type": "String"
          },
          {
            "type": "String"
          },
          {
            "type": "String"
          },
          {
            "type": "String"
          },
          {
            "type": "String"
          },
          {
            "type": "String"
          },
          {
            "type": "String"
          },
          {
            "type": "String"
          }
        ]
      },
      "dependsOn": []
    },
    {
      "name": "[concat(parameters('factoryName'), '/dcsazure_ADLS_to_ADLS_delimited_data_discovery_df')]",
      "type": "Microsoft.DataFactory/factories/dataflows",
      "apiVersion": "2018-06-01",
      "properties": {
        "folder": {
          "name": "dcsazure_ADLS_to_ADLS_delimited"
        },
        "type": "MappingDataFlow",
        "typeProperties": {
          "sources": [
            {
              "linkedService": {
                "referenceName": "[parameters('AzureDataLakeStorage_Source')]",
                "type": "LinkedServiceReference"
              },
              "name": "SourceData1MillRowDataSampling",
              "description": "Import the first million rows of unmasked data from the desired source dataset"
            },
            {
              "linkedService": {
                "referenceName": "[parameters('Metadata Datastore')]",
                "type": "LinkedServiceReference"
              },
              "name": "MetadataStoreRead",
              "description": "Import data from Metadata Datastore, querying the ruleset table"
            }
          ],
          "sinks": [
            {
              "linkedService": {
                "referenceName": "[parameters('Metadata Datastore')]",
                "type": "LinkedServiceReference"
              },
              "name": "WriteToMetadataStore",
              "description": "Sink results of profiling to metadata data store by sinking the unrolled results of the profiling call to the appropriate columns in the metadata store"
            }
          ],
          "transformations": [
            {
              "name": "CallDCSForAzureProfiling",
              "linkedService": {
                "referenceName": "[parameters('ProdDCSForAzureService')]",
                "type": "LinkedServiceReference"
              }
            },
            {
              "name": "CreateRandomIdColumn",
              "description": "Add a DELPHIX_COMPLIANCE_SERVICE_RANDOM_ID column, which is generated via the random expression. The current timestamp in milliseconds is used as the seed for the number generation"
            },
            {
              "name": "SortByRandomId",
              "description": "Sort the sample rows based on the randomly generated IDs"
            },
            {
              "name": "CreateFinalSelectionId",
              "description": "Add a DELPHIX_COMPLIANCE_SERVICE_FINAL_SELECTION_ID column that increments by 1 and starts at 1. It is incremented in order of the DELPHIX_COMPLIANCE_SERVICE_RANDOM_ID added previously, making it so that the surrogate key is in order of the randomly assigned value, creating a shuffled set of rows"
            },
            {
              "name": "GetRandomRows",
              "description": "Take the first DF_NUM_ROWS_TO_PROFILE from the shuffled row set"
            },
            {
              "name": "CreateItemsList",
              "description": "For every column that we didn't add collect it to produce a list of values, and encode the column name to avoid reserved characters"
            },
            {
              "name": "ParseAPIResponse",
              "description": "Parse the API response from profiling call"
            },
            {
              "name": "AssertNoFailures",
              "description": "Confirm that we received a 200 response status from the API request"
            },
            {
              "name": "FlattenDetails",
              "description": "Unroll the API response body into columnName, domain, algorithm, confidence, and rowsConsidered"
            },
            {
              "name": "FilterRowsToUpdate",
              "description": "Filter ruleset table down to the table in question by specifying dataset, specified_database, specified_schema, and identified_table - making sure they match the dataset associated with each version of the dataflow, DF_SOURCE_DATABASE, DF_SOURCE_SCHEMA, and DF_SOURCE_TABLE (respectively). This filters the ruleset down to only the columns that need to be profiled for this particular table"
            },
            {
              "name": "JoinDetailsAndMetadata",
              "description": "Inner join on FlattenDetails and FilterRowsToUpdate based on matching column names"
            },
            {
              "name": "ChecksBeforeSave",
              "description": "Alter rows using Update if (only update rows that need updating)"
            },
            {
              "name": "UpdateProfiledColumns",
              "description": "Updating the column last_profiled_updated_timestamp"
            },
            {
              "name": "FilterOnlyNewlyProfiledRows",
              "description": "Filter rows where the profiling results are different from previous dataflow executions (i.e. the profiled_domain, profiled_algorithm, rows_profiled, confidence_score or row_count have changed)"
            },
            {
              "name": "ItemsListWithRenamedColumns",
              "description": "Decode the encoded column name to restore it to the source column name"
            }
          ],
          "scriptLines": [
            "parameters{",
            "     runId as string (''),",
            "     DF_NUM_ROWS_TO_PROFILE as integer (1000),",
            "     DF_METADATA_SCHEMA as string ('dbo'),",
            "     DF_METADATA_RULESET_TABLE as string ('discovered_ruleset'),",
            "     DF_DATASET as string ('ADLS-DELIMITED'),",
            "     DF_SOURCE_CONTAINER as string (''),",
            "     DF_COLUMN_DELIMITER as string (''),",
            "     DF_QUOTE_CHARACTER as string ('\\\"'),",
            "     DF_ESCAPE_CHARACTER as string ('\\\\'),",
            "     DF_NULL_VALUE as string (''),",
            "     DF_SCHEMA as string (''),",
            "     DF_TABLE as string ('')",
            "}",
            "source(useSchema: false,",
            "     allowSchemaDrift: true,",
            "     validateSchema: false,",
            "     limit: 1000000,",
            "     ignoreNoFilesFound: false,",
            "     format: 'delimited',",
            "     fileSystem: ($DF_SOURCE_CONTAINER),",
            "     columnDelimiter: ($DF_COLUMN_DELIMITER),",
            "     escapeChar: ($DF_ESCAPE_CHARACTER),",
            "     quoteChar: ($DF_QUOTE_CHARACTER),",
            "     nullValue: ($DF_NULL_VALUE),",
            "     columnNamesAsHeader: true,",
            "     multiLineRow: true,",
            "     wildcardPaths:[(concat($DF_SCHEMA,'*',iif(equals('NO_EXT',$DF_TABLE),'',$DF_TABLE)))],",
            "     partitionBy('roundRobin', 32)) ~> SourceData1MillRowDataSampling",
            "source(output(",
            "          dataset as string,",
            "          specified_database as string,",
            "          specified_schema as string,",
            "          identified_table as string,",
            "          identified_column as string,",
            "          identified_column_type as string,",
            "          identified_column_max_length as integer,",
            "          ordinal_position as integer,",
            "          row_count as long,",
            "          source_metadata as string,",
            "          profiled_domain as string,",
            "          profiled_algorithm as string,",
            "          confidence_score as decimal(6,5),",
            "          rows_profiled as long,",
            "          assigned_algorithm as string,",
            "          last_profiled_updated_timestamp as timestamp,",
            "          discovery_complete as boolean,",
            "          latest_event as string,",
            "          algorithm_metadata as string",
            "     ),",
            "     allowSchemaDrift: false,",
            "     validateSchema: false,",
            "     format: 'table',",
            "     store: 'sqlserver',",
            "     schemaName: ($DF_METADATA_SCHEMA),",
            "     tableName: ($DF_METADATA_RULESET_TABLE),",
            "     isolationLevel: 'READ_UNCOMMITTED') ~> MetadataStoreRead",
            "ItemsListWithRenamedColumns call(mapColumn(",
            "          each(match(true()))",
            "     ),",
            "     skipDuplicateMapInputs: false,",
            "     skipDuplicateMapOutputs: false,",
            "     output(",
            "          headers as [string,string],",
            "          body as string,",
            "          status as string",
            "     ),",
            "     allowSchemaDrift: true,",
            "     format: 'rest',",
            "     store: 'restservice',",
            "     timeout: 30,",
            "     requestInterval: 0,",
            "     headers = ['Run-Id' -> $runId],",
            "     httpMethod: 'POST',",
            "     entity: 'v1/discovery/profileByColumn',",
            "     headerColumnName: 'headers',",
            "     bodyColumnName: 'body',",
            "     statusColumnName: 'status',",
            "     addResponseCode: true,",
            "     requestFormat: ['type' -> 'json']) ~> CallDCSForAzureProfiling",
            "SourceData1MillRowDataSampling derive(DELPHIX_COMPLIANCE_SERVICE_RANDOM_ID = random(millisecond(currentTimestamp()))) ~> CreateRandomIdColumn",
            "CreateRandomIdColumn sort(asc(DELPHIX_COMPLIANCE_SERVICE_RANDOM_ID, true)) ~> SortByRandomId",
            "SortByRandomId keyGenerate(output(DELPHIX_COMPLIANCE_SERVICE_FINAL_SELECTION_ID as long),",
            "     startAt: 1L,",
            "     stepValue: 1L) ~> CreateFinalSelectionId",
            "CreateFinalSelectionId filter(DELPHIX_COMPLIANCE_SERVICE_FINAL_SELECTION_ID < ($DF_NUM_ROWS_TO_PROFILE +1)) ~> GetRandomRows",
            "GetRandomRows aggregate(each(match(name!='DELPHIX_COMPLIANCE_SERVICE_FINAL_SELECTION_ID'&&name!='DELPHIX_COMPLIANCE_SERVICE_RANDOM_ID'), concat('x',hex(encode($$))) = collect($$))) ~> CreateItemsList",
            "CallDCSForAzureProfiling parse(body = body ? (timestamp as date,",
            "          status as string,",
            "          message as string,",
            "          trace_id as string,",
            "          items as (details as (columnName as string, domain as string, algorithm as string, confidence as float, rowsConsidered as integer)[])),",
            "     format: 'json',",
            "     documentForm: 'singleDocument') ~> ParseAPIResponse",
            "ParseAPIResponse assert(expectTrue(toInteger(regexExtract(status, '(\\\\d+)', 1)) == 200, false, 'Failed_request', null, iif(isNull(body.message), status, concatWS(', ', 'timestamp: ' + toString(body.timestamp), 'status: ' + body.status, 'message: ' + body.message, 'trace_id: ' + body.trace_id))),",
            "     abort: true) ~> AssertNoFailures",
            "AssertNoFailures foldDown(unroll(body.items.details),",
            "     mapColumn(",
            "          columnName = body.items.details.columnName,",
            "          domain = body.items.details.domain,",
            "          algorithm = body.items.details.algorithm,",
            "          confidence = body.items.details.confidence,",
            "          rowsConsidered = body.items.details.rowsConsidered",
            "     ),",
            "     skipDuplicateMapInputs: false,",
            "     skipDuplicateMapOutputs: false) ~> FlattenDetails",
            "MetadataStoreRead filter(equalsIgnoreCase(dataset, $DF_DATASET)",
            "&& equalsIgnoreCase(specified_database, $DF_SOURCE_CONTAINER)",
            "&& equalsIgnoreCase(specified_schema, $DF_SCHEMA)",
            "&& equalsIgnoreCase(identified_table, $DF_TABLE)) ~> FilterRowsToUpdate",
            "FlattenDetails, FilterRowsToUpdate join(columnName <=> identified_column,",
            "     joinType:'inner',",
            "     matchType:'exact',",
            "     ignoreSpaces: false,",
            "     broadcast: 'left')~> JoinDetailsAndMetadata",
            "UpdateProfiledColumns alterRow(updateIf(true())) ~> ChecksBeforeSave",
            "FilterOnlyNewlyProfiledRows derive(last_profiled_updated_timestamp = currentTimestamp()) ~> UpdateProfiledColumns",
            "JoinDetailsAndMetadata filter(!equalsIgnoreCase(domain, profiled_domain)",
            "|| !equalsIgnoreCase(algorithm, profiled_algorithm)",
            "|| rowsConsidered != rows_profiled",
            "|| toDecimal(confidence) != toDecimal(confidence_score)) ~> FilterOnlyNewlyProfiledRows",
            "CreateItemsList select(mapColumn(",
            "          each(match(startsWith(name,'x')),",
            "               decode(unhex(replace($$,'x',''))) = $$)",
            "     ),",
            "     skipDuplicateMapInputs: true,",
            "     skipDuplicateMapOutputs: true) ~> ItemsListWithRenamedColumns",
            "ChecksBeforeSave sink(allowSchemaDrift: true,",
            "     validateSchema: false,",
            "     input(",
            "          dataset as string,",
            "          specified_database as string,",
            "          specified_schema as string,",
            "          identified_table as string,",
            "          identified_column as string,",
            "          identified_column_type as string,",
            "          identified_column_max_length as integer,",
            "          ordinal_position as integer,",
            "          row_count as long,",
            "          profiled_domain as string,",
            "          profiled_algorithm as string,",
            "          confidence_score as decimal(6,5),",
            "          rows_profiled as long,",
            "          assigned_algorithm as string,",
            "          last_profiled_updated_timestamp as timestamp",
            "     ),",
            "     format: 'table',",
            "     store: 'sqlserver',",
            "     schemaName: ($DF_METADATA_SCHEMA),",
            "     tableName: ($DF_METADATA_RULESET_TABLE),",
            "     insertable: false,",
            "     updateable: true,",
            "     deletable: false,",
            "     upsertable: false,",
            "     keys:(array(\"dataset\", \"specified_database\", \"specified_schema\", \"identified_table\", \"identified_column\")),",
            "     skipKeyWrites:true,",
            "     skipDuplicateMapInputs: true,",
            "     skipDuplicateMapOutputs: true,",
            "     errorHandlingOption: 'stopOnFirstError',",
            "     mapColumn(",
            "          dataset,",
            "          specified_database,",
            "          specified_schema,",
            "          identified_table,",
            "          identified_column,",
            "          identified_column_type,",
            "          identified_column_max_length,",
            "          ordinal_position,",
            "          row_count,",
            "          profiled_domain = domain,",
            "          profiled_algorithm = algorithm,",
            "          confidence_score = confidence,",
            "          rows_profiled = rowsConsidered,",
            "          last_profiled_updated_timestamp",
            "     )) ~> WriteToMetadataStore"
          ]
        }
      },
      "dependsOn": []
    },
    {
      "name": "[concat(parameters('factoryName'), '/dcsazure_ADLS_to_ADLS_delimited_file_schema_discovery_pl')]",
      "type": "Microsoft.DataFactory/factories/pipelines",
      "apiVersion": "2018-06-01",
      "properties": {
        "activities": [
          {
            "name": "Get File Structure",
            "type": "GetMetadata",
            "dependsOn": [],
            "policy": {
              "timeout": "0.12:00:00",
              "retry": 0,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "dataset": {
                "referenceName": "dcsazure_ADLS_to_ADLS_delimited_header_file_schema_discovery_ds",
                "type": "DatasetReference",
                "parameters": {
                  "DS_STORAGE_CONTAINER": {
                    "value": "@pipeline().parameters.P_STORAGE_CONTAINER",
                    "type": "Expression"
                  },
                  "DS_DIRECTORY": {
                    "value": "@pipeline().parameters.P_DIRECTORY",
                    "type": "Expression"
                  },
                  "DS_FILE_NAME": {
                    "value": "@pipeline().parameters.P_FILENAME",
                    "type": "Expression"
                  },
                  "DS_COLUMN_DELIMITER": {
                    "value": "@pipeline().parameters.P_COLUMN_DELIMITER",
                    "type": "Expression"
                  },
                  "DS_QUOTE_CHARACTER": {
                    "value": "@pipeline().parameters.P_QUOTE_CHARACTER",
                    "type": "Expression"
                  },
                  "DS_ESCAPE_CHARACTER": {
                    "value": "@pipeline().parameters.P_ESCAPE_CHARACTER",
                    "type": "Expression"
                  },
                  "DS_NULL_VALUE": {
                    "value": "@pipeline().parameters.P_NULL_VALUE",
                    "type": "Expression"
                  }
                }
              },
              "fieldList": [
                "structure"
              ],
              "storeSettings": {
                "type": "AzureBlobFSReadSettings",
                "recursive": true,
                "enablePartitionDiscovery": false
              },
              "formatSettings": {
                "type": "DelimitedTextReadSettings"
              }
            }
          },
          {
            "name": "Persist Metadata To Database",
            "type": "SqlServerStoredProcedure",
            "dependsOn": [
              {
                "activity": "Get File Structure",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "policy": {
              "timeout": "0.12:00:00",
              "retry": 0,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "storedProcedureName": {
                "value": "@{pipeline().parameters.P_METADATA_SCHEMA}.@{pipeline().parameters.P_COLUMNS_FROM_ADLS_FILE_STRUCTURE_PROCEDURE_NAME}",
                "type": "Expression"
              },
              "storedProcedureParameters": {
                "adf_file_structure": {
                  "value": {
                    "value": "@string(activity('Get File Structure').output.structure)",
                    "type": "Expression"
                  },
                  "type": "String"
                },
                "column_delimiter": {
                  "value": {
                    "value": "@pipeline().parameters.P_COLUMN_DELIMITER",
                    "type": "Expression"
                  },
                  "type": "String"
                },
                "database": {
                  "value": {
                    "value": "@pipeline().parameters.P_STORAGE_CONTAINER",
                    "type": "Expression"
                  },
                  "type": "String"
                },
                "escape_character": {
                  "value": {
                    "value": "@replace(pipeline().parameters.P_ESCAPE_CHARACTER,'\\','\\\\')",
                    "type": "Expression"
                  },
                  "type": "String"
                },
                "null_value": {
                  "value": {
                    "value": "@pipeline().parameters.P_NULL_VALUE",
                    "type": "Expression"
                  },
                  "type": "String"
                },
                "quote_character": {
                  "value": {
                    "value": "@pipeline().parameters.P_QUOTE_CHARACTER",
                    "type": "Expression"
                  },
                  "type": "String"
                },
                "schema": {
                  "value": {
                    "value": "@concat(pipeline().parameters.P_DIRECTORY,'/',pipeline().parameters.P_PREFIX)",
                    "type": "Expression"
                  },
                  "type": "String"
                },
                "table": {
                  "value": {
                    "value": "@pipeline().parameters.P_SUFFIX",
                    "type": "Expression"
                  },
                  "type": "String"
                },
                "dataset": {
                  "value": {
                    "value": "@pipeline().parameters.P_DATASET",
                    "type": "Expression"
                  },
                  "type": "String"
                }
              }
            },
            "linkedServiceName": {
              "referenceName": "[parameters('Metadata Datastore')]",
              "type": "LinkedServiceReference"
            }
          }
        ],
        "policy": {
          "elapsedTimeMetric": {}
        },
        "parameters": {
          "P_METADATA_SCHEMA": {
            "type": "string"
          },
          "P_METADATA_RULESET_TABLE": {
            "type": "string"
          },
          "P_STORAGE_CONTAINER": {
            "type": "String"
          },
          "P_DIRECTORY": {
            "type": "string"
          },
          "P_SUFFIX": {
            "type": "string"
          },
          "P_COLUMN_DELIMITER": {
            "type": "string"
          },
          "P_COLUMNS_FROM_ADLS_FILE_STRUCTURE_PROCEDURE_NAME": {
            "type": "string"
          },
          "P_PREFIX": {
            "type": "string"
          },
          "P_QUOTE_CHARACTER": {
            "type": "string"
          },
          "P_NULL_VALUE": {
            "type": "string"
          },
          "P_ESCAPE_CHARACTER": {
            "type": "string"
          },
          "P_FILENAME": {
            "type": "string"
          },
          "P_DATASET": {
            "type": "string"
          }
        },
        "variables": {
          "HOMOGENOUS_SCHEMAS": {
            "type": "Array"
          },
          "HETROGENOUS_SCHEMAS": {
            "type": "Array"
          },
          "UNIQUE_HOMEGENOUS_SCHEMAS": {
            "type": "Array"
          },
          "UNIQUE_HETROGENOUS_SCHEMAS": {
            "type": "Array"
          }
        },
        "folder": {
          "name": "dcsazure_ADLS_to_ADLS_delimited"
        },
        "annotations": [],
        "lastPublishTime": "2025-04-03T07:12:08Z"
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/datasets/dcsazure_ADLS_to_ADLS_delimited_header_file_schema_discovery_ds')]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/dcsazure_ADLS_to_ADLS_delimited_header_file_schema_discovery_ds')]",
      "type": "Microsoft.DataFactory/factories/datasets",
      "apiVersion": "2018-06-01",
      "properties": {
        "linkedServiceName": {
          "referenceName": "[parameters('AzureDataLakeStorage_Source')]",
          "type": "LinkedServiceReference"
        },
        "parameters": {
          "DS_STORAGE_CONTAINER": {
            "type": "String"
          },
          "DS_DIRECTORY": {
            "type": "String"
          },
          "DS_FILE_NAME": {
            "type": "String"
          },
          "DS_COLUMN_DELIMITER": {
            "type": "String"
          },
          "DS_QUOTE_CHARACTER": {
            "type": "string"
          },
          "DS_ESCAPE_CHARACTER": {
            "type": "string"
          },
          "DS_NULL_VALUE": {
            "type": "string"
          }
        },
        "folder": {
          "name": "dcsazure_ADLS_to_ADLS_delimited"
        },
        "annotations": [],
        "type": "DelimitedText",
        "typeProperties": {
          "location": {
            "type": "AzureBlobFSLocation",
            "fileName": {
              "value": "@dataset().DS_FILE_NAME",
              "type": "Expression"
            },
            "folderPath": {
              "value": "@dataset().DS_DIRECTORY",
              "type": "Expression"
            },
            "fileSystem": {
              "value": "@dataset().DS_STORAGE_CONTAINER",
              "type": "Expression"
            }
          },
          "columnDelimiter": {
            "value": "@dataset().DS_COLUMN_DELIMITER",
            "type": "Expression"
          },
          "escapeChar": {
            "value": "@dataset().DS_ESCAPE_CHARACTER",
            "type": "Expression"
          },
          "firstRowAsHeader": true,
          "quoteChar": {
            "value": "@dataset().DS_QUOTE_CHARACTER",
            "type": "Expression"
          }
        },
        "schema": [
          {
            "type": "String"
          },
          {
            "type": "String"
          },
          {
            "type": "String"
          },
          {
            "type": "String"
          },
          {
            "type": "String"
          },
          {
            "type": "String"
          },
          {
            "type": "String"
          },
          {
            "type": "String"
          },
          {
            "type": "String"
          },
          {
            "type": "String"
          },
          {
            "type": "String"
          },
          {
            "type": "String"
          },
          {
            "type": "String"
          },
          {
            "type": "String"
          },
          {
            "type": "String"
          },
          {
            "type": "String"
          },
          {
            "type": "String"
          },
          {
            "type": "String"
          },
          {
            "type": "String"
          },
          {
            "type": "String"
          },
          {
            "type": "String"
          },
          {
            "type": "String"
          },
          {
            "type": "String"
          },
          {
            "type": "String"
          },
          {
            "type": "String"
          },
          {
            "type": "String"
          },
          {
            "type": "String"
          },
          {
            "type": "String"
          },
          {
            "type": "String"
          },
          {
            "type": "String"
          },
          {
            "type": "String"
          },
          {
            "type": "String"
          },
          {
            "type": "String"
          },
          {
            "type": "String"
          },
          {
            "type": "String"
          },
          {
            "type": "String"
          },
          {
            "type": "String"
          },
          {
            "type": "String"
          },
          {
            "type": "String"
          },
          {
            "type": "String"
          },
          {
            "type": "String"
          },
          {
            "type": "String"
          },
          {
            "type": "String"
          },
          {
            "type": "String"
          },
          {
            "type": "String"
          },
          {
            "type": "String"
          },
          {
            "type": "String"
          },
          {
            "type": "String"
          },
          {
            "type": "String"
          },
          {
            "type": "String"
          },
          {
            "type": "String"
          }
        ]
      },
      "dependsOn": []
    }
  ]
}
