{
  "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "factoryName": {
      "type": "string",
      "metadata": "Data Factory name"
    },
    "BlobStoreStagingArea": {
      "type": "string"
    },
    "Test Snowflake Instance": {
      "type": "string"
    },
    "Metadata Datastore": {
      "type": "string"
    },
    "ProdDCSForAzureService": {
      "type": "string"
    }
  },
  "variables": {
    "factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
  },
  "resources": [
    {
      "name": "[concat(parameters('factoryName'), '/dcsazure_Snowflake_to_Snowflake_prof_pl')]",
      "type": "Microsoft.DataFactory/factories/pipelines",
      "apiVersion": "2018-06-01",
      "properties": {
        "activities": [
          {
            "name": "Schema Discovery From Snowflake",
            "type": "Copy",
            "dependsOn": [],
            "policy": {
              "timeout": "0.12:00:00",
              "retry": 0,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "source": {
                "type": "SnowflakeSource",
                "query": {
                  "value": "SELECT \n    'SNOWFLAKE' AS dataset,\n    T.TABLE_CATALOG AS specified_database,\n    C.TABLE_SCHEMA AS specified_schema,\n    C.TABLE_NAME AS identified_table,\n    C.COLUMN_NAME AS identified_column,\n    C.DATA_TYPE AS identified_column_type,\n    IFNULL(C.CHARACTER_MAXIMUM_LENGTH,-1) AS identified_column_max_length,\n    C.ORDINAL_POSITION AS ordinal_position,\n    T.ROW_COUNT AS row_count\nFROM\n    @{pipeline().parameters.P_SOURCE_DATABASE}.INFORMATION_SCHEMA.COLUMNS C,\n    @{pipeline().parameters.P_SOURCE_DATABASE}.INFORMATION_SCHEMA.TABLES T\nWHERE\n    UPPER(T.TABLE_CATALOG) = UPPER('@{pipeline().parameters.P_SOURCE_DATABASE}')\n    AND UPPER(C.TABLE_SCHEMA) = UPPER('@{pipeline().parameters.P_SOURCE_SCHEMA}')\n    AND C.TABLE_NAME = T.TABLE_NAME\n    AND C.TABLE_SCHEMA = T.TABLE_SCHEMA\n    AND T.TABLE_TYPE = 'BASE TABLE'\nORDER BY C.TABLE_NAME, C.ORDINAL_POSITION",
                  "type": "Expression"
                },
                "exportSettings": {
                  "type": "SnowflakeExportCopyCommand"
                }
              },
              "sink": {
                "type": "AzureSqlSink",
                "writeBehavior": "upsert",
                "upsertSettings": {
                  "useTempDB": true,
                  "keys": [
                    "dataset",
                    "specified_database",
                    "specified_schema",
                    "identified_table",
                    "identified_column"
                  ]
                },
                "sqlWriterUseTableLock": false,
                "disableMetricsCollection": false
              },
              "enableStaging": true,
              "stagingSettings": {
                "linkedServiceName": {
                  "referenceName": "[parameters('BlobStoreStagingArea')]",
                  "type": "LinkedServiceReference"
                },
                "path": {
                  "value": "@pipeline().parameters.P_STAGING_STORAGE_PATH",
                  "type": "Expression"
                }
              },
              "translator": {
                "type": "TabularTranslator",
                "mappings": [
                  {
                    "source": {
                      "name": "DATASET",
                      "type": "String"
                    },
                    "sink": {
                      "name": "dataset",
                      "type": "String"
                    }
                  },
                  {
                    "source": {
                      "name": "SPECIFIED_DATABASE",
                      "type": "String"
                    },
                    "sink": {
                      "name": "specified_database",
                      "type": "String"
                    }
                  },
                  {
                    "source": {
                      "name": "SPECIFIED_SCHEMA",
                      "type": "String"
                    },
                    "sink": {
                      "name": "specified_schema",
                      "type": "String"
                    }
                  },
                  {
                    "source": {
                      "name": "IDENTIFIED_TABLE",
                      "type": "String"
                    },
                    "sink": {
                      "name": "identified_table",
                      "type": "String"
                    }
                  },
                  {
                    "source": {
                      "name": "IDENTIFIED_COLUMN",
                      "type": "String"
                    },
                    "sink": {
                      "name": "identified_column",
                      "type": "String"
                    }
                  },
                  {
                    "source": {
                      "name": "IDENTIFIED_COLUMN_TYPE",
                      "type": "String"
                    },
                    "sink": {
                      "name": "identified_column_type",
                      "type": "String"
                    }
                  },
                  {
                    "source": {
                      "name": "IDENTIFIED_COLUMN_MAX_LENGTH",
                      "type": "String"
                    },
                    "sink": {
                      "name": "identified_column_max_length",
                      "type": "Int32"
                    }
                  },
                  {
                    "source": {
                      "name": "ORDINAL_POSITION",
                      "type": "String"
                    },
                    "sink": {
                      "name": "ordinal_position",
                      "type": "Int32"
                    }
                  },
                  {
                    "source": {
                      "name": "ROW_COUNT",
                      "type": "String"
                    },
                    "sink": {
                      "name": "row_count",
                      "type": "Int64"
                    }
                  }
                ]
              }
            },
            "inputs": [
              {
                "referenceName": "dcsazure_Snowflake_to_Snowflake_source_ds",
                "type": "DatasetReference",
                "parameters": {
                  "DS_SCHEMA": "INFORMATION_SCHEMA",
                  "DS_TABLE": "TABLES"
                }
              }
            ],
            "outputs": [
              {
                "referenceName": "dcsazure_Snowflake_to_Snowflake_metadata_prof_ds",
                "type": "DatasetReference",
                "parameters": {
                  "DS_METADATA_SCHEMA": {
                    "value": "@pipeline().parameters.P_METADATA_SCHEMA",
                    "type": "Expression"
                  },
                  "DS_METADATA_TABLE": {
                    "value": "@pipeline().parameters.P_METADATA_RULESET_TABLE",
                    "type": "Expression"
                  }
                }
              }
            ]
          },
          {
            "name": "Select Discovered Tables",
            "type": "Lookup",
            "dependsOn": [
              {
                "activity": "Schema Discovery From Snowflake",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "policy": {
              "timeout": "0.12:00:00",
              "retry": 0,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "source": {
                "type": "AzureSqlSource",
                "sqlReaderQuery": {
                  "value": "SELECT DISTINCT identified_table FROM @{pipeline().parameters.P_METADATA_SCHEMA}.@{pipeline().parameters.P_METADATA_RULESET_TABLE}\nWHERE\n   UPPER(specified_database) = UPPER('@{pipeline().parameters.P_SOURCE_DATABASE}')\n   AND UPPER(specified_schema) = UPPER('@{pipeline().parameters.P_SOURCE_SCHEMA}')\nORDER BY identified_table",
                  "type": "Expression"
                },
                "queryTimeout": "02:00:00",
                "partitionOption": "None"
              },
              "dataset": {
                "referenceName": "dcsazure_Snowflake_to_Snowflake_metadata_prof_ds",
                "type": "DatasetReference",
                "parameters": {
                  "DS_METADATA_SCHEMA": {
                    "value": "@pipeline().parameters.P_METADATA_SCHEMA",
                    "type": "Expression"
                  },
                  "DS_METADATA_TABLE": {
                    "value": "@pipeline().parameters.P_METADATA_RULESET_TABLE",
                    "type": "Expression"
                  }
                }
              },
              "firstRowOnly": false
            }
          },
          {
            "name": "For Each Discovered Table",
            "type": "ForEach",
            "dependsOn": [
              {
                "activity": "Select Discovered Tables",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "userProperties": [],
            "typeProperties": {
              "items": {
                "value": "@activity('Select Discovered Tables').output.value",
                "type": "Expression"
              },
              "activities": [
                {
                  "name": "Profile",
                  "type": "ExecuteDataFlow",
                  "dependsOn": [],
                  "policy": {
                    "timeout": "0.12:00:00",
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                  },
                  "userProperties": [],
                  "typeProperties": {
                    "dataflow": {
                      "referenceName": "dcsazure_Snowflake_to_Snowflake_prof_df",
                      "type": "DataFlowReference",
                      "parameters": {
                        "runId": {
                          "value": "'@{pipeline().RunId}'",
                          "type": "Expression"
                        },
                        "DF_SOURCE_DATABASE": {
                          "value": "'@{pipeline().parameters.P_SOURCE_DATABASE}'",
                          "type": "Expression"
                        },
                        "DF_SOURCE_SCHEMA": {
                          "value": "'@{pipeline().parameters.P_SOURCE_SCHEMA}'",
                          "type": "Expression"
                        },
                        "DF_SOURCE_TABLE": {
                          "value": "'@{item().identified_table}'",
                          "type": "Expression"
                        },
                        "DF_NUM_ROWS_TO_PROFILE": "1000",
                        "DF_METADATA_SCHEMA": {
                          "value": "'@{pipeline().parameters.P_METADATA_SCHEMA}'",
                          "type": "Expression"
                        },
                        "DF_METADATA_RULESET_TABLE": {
                          "value": "'@{pipeline().parameters.P_METADATA_RULESET_TABLE}'",
                          "type": "Expression"
                        }
                      },
                      "datasetParameters": {
                        "SnowflakeSource1MillRowDataSampling": {},
                        "MetadataStoreRead": {},
                        "WriteToMetadataStore": {}
                      }
                    },
                    "staging": {},
                    "compute": {
                      "coreCount": 8,
                      "computeType": "General"
                    },
                    "traceLevel": "None",
                    "cacheSinks": {
                      "firstRowOnly": true
                    }
                  }
                }
              ]
            }
          }
        ],
        "policy": {
          "elapsedTimeMetric": {}
        },
        "parameters": {
          "P_SOURCE_DATABASE": {
            "type": "string"
          },
          "P_SOURCE_SCHEMA": {
            "type": "string"
          },
          "P_STAGING_STORAGE_PATH": {
            "type": "string"
          },
          "P_METADATA_SCHEMA": {
            "type": "string",
            "defaultValue": "dbo"
          },
          "P_METADATA_RULESET_TABLE": {
            "type": "string",
            "defaultValue": "discovered_ruleset"
          }
        },
        "variables": {
          "TEST": {
            "type": "Array"
          }
        },
        "folder": {
          "name": "dcsazure_Snowflake_to_Snowflake"
        },
        "annotations": [],
        "lastPublishTime": "2024-02-12T23:43:06Z"
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/datasets/dcsazure_Snowflake_to_Snowflake_source_ds')]",
        "[concat(variables('factoryId'), '/datasets/dcsazure_Snowflake_to_Snowflake_metadata_prof_ds')]",
        "[concat(variables('factoryId'), '/dataflows/dcsazure_Snowflake_to_Snowflake_prof_df')]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/dcsazure_Snowflake_to_Snowflake_source_ds')]",
      "type": "Microsoft.DataFactory/factories/datasets",
      "apiVersion": "2018-06-01",
      "properties": {
        "linkedServiceName": {
          "referenceName": "[parameters('Test Snowflake Instance')]",
          "type": "LinkedServiceReference"
        },
        "parameters": {
          "DS_SCHEMA": {
            "type": "string",
            "defaultValue": "SALES"
          },
          "DS_TABLE": {
            "type": "string",
            "defaultValue": "CUSTOMERS"
          }
        },
        "folder": {
          "name": "dcsazure_Snowflake_to_Snowflake"
        },
        "annotations": [],
        "type": "SnowflakeTable",
        "schema": [],
        "typeProperties": {
          "schema": {
            "value": "@dataset().DS_SCHEMA",
            "type": "Expression"
          },
          "table": {
            "value": "@dataset().DS_TABLE",
            "type": "Expression"
          }
        }
      },
      "dependsOn": []
    },
    {
      "name": "[concat(parameters('factoryName'), '/dcsazure_Snowflake_to_Snowflake_metadata_prof_ds')]",
      "type": "Microsoft.DataFactory/factories/datasets",
      "apiVersion": "2018-06-01",
      "properties": {
        "linkedServiceName": {
          "referenceName": "[parameters('Metadata Datastore')]",
          "type": "LinkedServiceReference"
        },
        "parameters": {
          "DS_METADATA_SCHEMA": {
            "type": "string",
            "defaultValue": "lnguyen"
          },
          "DS_METADATA_TABLE": {
            "type": "string",
            "defaultValue": "discovered_metadata"
          }
        },
        "folder": {
          "name": "dcsazure_Snowflake_to_Snowflake"
        },
        "annotations": [],
        "type": "AzureSqlTable",
        "schema": [
          {
            "name": "source_database",
            "type": "varchar"
          },
          {
            "name": "source_schema",
            "type": "varchar"
          },
          {
            "name": "source_table",
            "type": "varchar"
          },
          {
            "name": "source_column",
            "type": "varchar"
          },
          {
            "name": "destination_database",
            "type": "varchar"
          },
          {
            "name": "destination_schema",
            "type": "varchar"
          },
          {
            "name": "destination_table",
            "type": "varchar"
          }
        ],
        "typeProperties": {
          "schema": {
            "value": "@dataset().DS_METADATA_SCHEMA",
            "type": "Expression"
          },
          "table": {
            "value": "@dataset().DS_METADATA_TABLE",
            "type": "Expression"
          }
        }
      },
      "dependsOn": []
    },
    {
      "name": "[concat(parameters('factoryName'), '/dcsazure_Snowflake_to_Snowflake_prof_df')]",
      "type": "Microsoft.DataFactory/factories/dataflows",
      "apiVersion": "2018-06-01",
      "properties": {
        "folder": {
          "name": "dcsazure_Snowflake_to_Snowflake"
        },
        "type": "MappingDataFlow",
        "typeProperties": {
          "sources": [
            {
              "linkedService": {
                "referenceName": "[parameters('Test Snowflake Instance')]",
                "type": "LinkedServiceReference"
              },
              "name": "SnowflakeSource1MillRowDataSampling",
              "description": "Import the first 1 million rows of unmasked data from the desired source dataset."
            },
            {
              "linkedService": {
                "referenceName": "[parameters('Metadata Datastore')]",
                "type": "LinkedServiceReference"
              },
              "name": "MetadataStoreRead"
            }
          ],
          "sinks": [
            {
              "linkedService": {
                "referenceName": "[parameters('Metadata Datastore')]",
                "type": "LinkedServiceReference"
              },
              "name": "WriteToMetadataStore"
            }
          ],
          "transformations": [
            {
              "name": "CallDCSForAzureProfiling",
              "linkedService": {
                "referenceName": "[parameters('ProdDCSForAzureService')]",
                "type": "LinkedServiceReference"
              }
            },
            {
              "name": "CreateRandomIdColumn",
              "description": "Add a DELPHIX_COMPLIANCE_SERVICE_RANDOM_ID column, which is generated via the `random` expression. The current timestamp in milliseconds is used as the seed for the number generation."
            },
            {
              "name": "SortByRandomId",
              "description": "Sort the sample rows based on the randomly generated IDs."
            },
            {
              "name": "CreateFinalSelectionId",
              "description": "Add a DELPHIX_COMPLIANCE_SERVICE_FINAL_SELECTION_ID column that increments by 1 and starts at 1. It is incremented in order of the DELPHIX_COMPLIANCE_SERVICE_RANDOM_ID added previously."
            },
            {
              "name": "GetRandomRows",
              "description": "Filter $DF_ROWS rows using the DELPHIX_COMPLIANCE_SERVICE_FINAL_SELECTION_ID."
            },
            {
              "name": "CreateItemsList"
            },
            {
              "name": "ParseAPIResponse",
              "description": "Parsing the external call body output"
            },
            {
              "name": "AssertNoFailures"
            },
            {
              "name": "FlattenDetails"
            },
            {
              "name": "FilterRowsToUpdate"
            },
            {
              "name": "JoinDetailsAndMetadata"
            },
            {
              "name": "ChecksBeforeSave"
            },
            {
              "name": "UpdateProfiledColumns"
            },
            {
              "name": "FilterOnlyNewlyProfiledRows"
            }
          ],
          "scriptLines": [
            "parameters{",
            "     runId as string (''),",
            "     DF_SOURCE_DATABASE as string (''),",
            "     DF_SOURCE_SCHEMA as string (''),",
            "     DF_SOURCE_TABLE as string (''),",
            "     DF_NUM_ROWS_TO_PROFILE as integer (1000),",
            "     DF_METADATA_SCHEMA as string (''),",
            "     DF_METADATA_RULESET_TABLE as string ('discovered_ruleset')",
            "}",
            "source(allowSchemaDrift: true,",
            "     validateSchema: false,",
            "     limit: 1000000,",
            "     format: 'table',",
            "     tableName: (upper($DF_SOURCE_TABLE)),",
            "     schemaName: (upper($DF_SOURCE_SCHEMA)),",
            "     store: 'snowflake',",
            "     partitionBy('roundRobin', 32)) ~> SnowflakeSource1MillRowDataSampling",
            "source(output(",
            "          dataset as string,",
            "          specified_database as string,",
            "          specified_schema as string,",
            "          identified_table as string,",
            "          identified_column as string,",
            "          identified_column_type as string,",
            "          identified_column_max_length as integer,",
            "          ordinal_position as integer,",
            "          row_count as long,",
            "          profiled_domain as string,",
            "          profiled_algorithm as string,",
            "          confidence_score as decimal(6,5),",
            "          rows_profiled as long,",
            "          assigned_algorithm as string,",
            "          last_profiled_updated_timestamp as timestamp",
            "     ),",
            "     allowSchemaDrift: false,",
            "     validateSchema: false,",
            "     format: 'table',",
            "     store: 'sqlserver',",
            "     schemaName: ($DF_METADATA_SCHEMA),",
            "     tableName: ($DF_METADATA_RULESET_TABLE),",
            "     isolationLevel: 'READ_UNCOMMITTED') ~> MetadataStoreRead",
            "CreateItemsList call(mapColumn(",
            "          each(match(true()))",
            "     ),",
            "     skipDuplicateMapInputs: false,",
            "     skipDuplicateMapOutputs: false,",
            "     output(",
            "          headers as [string,string],",
            "          body as string,",
            "          status as string",
            "     ),",
            "     allowSchemaDrift: true,",
            "     format: 'rest',",
            "     store: 'restservice',",
            "     timeout: 30,",
            "     requestInterval: 0,",
            "     headers = ['Run-Id' -> $runId],",
            "     httpMethod: 'POST',",
            "     entity: '/v1/discovery/profileByColumn',",
            "     headerColumnName: 'headers',",
            "     bodyColumnName: 'body',",
            "     statusColumnName: 'status',",
            "     addResponseCode: true,",
            "     requestFormat: ['type' -> 'json']) ~> CallDCSForAzureProfiling",
            "SnowflakeSource1MillRowDataSampling derive(DELPHIX_COMPLIANCE_SERVICE_RANDOM_ID = random(millisecond(currentTimestamp()))) ~> CreateRandomIdColumn",
            "CreateRandomIdColumn sort(asc(DELPHIX_COMPLIANCE_SERVICE_RANDOM_ID, true)) ~> SortByRandomId",
            "SortByRandomId keyGenerate(output(DELPHIX_COMPLIANCE_SERVICE_FINAL_SELECTION_ID as long),",
            "     startAt: 1L,",
            "     stepValue: 1L) ~> CreateFinalSelectionId",
            "CreateFinalSelectionId filter(DELPHIX_COMPLIANCE_SERVICE_FINAL_SELECTION_ID < ($DF_NUM_ROWS_TO_PROFILE +1)) ~> GetRandomRows",
            "GetRandomRows aggregate(each(match(name!='DELPHIX_COMPLIANCE_SERVICE_FINAL_SELECTION_ID'&&name!='DELPHIX_COMPLIANCE_SERVICE_RANDOM_ID'), $$ = collect($$))) ~> CreateItemsList",
            "CallDCSForAzureProfiling parse(body = body ? (timestamp as date,",
            "          status as string,",
            "          message as string,",
            "          trace_id as string,",
            "          items as (details as (columnName as string, domain as string, algorithm as string, confidence as float, rowsConsidered as integer)[])),",
            "     format: 'json',",
            "     documentForm: 'singleDocument') ~> ParseAPIResponse",
            "ParseAPIResponse assert(expectTrue(toInteger(regexExtract(status, '(\\\\d+)', 1)) == 200, false, 'Failed_request', null, iif(isNull(body.message), status, concatWS(', ', 'timestamp: ' + toString(body.timestamp), 'status: ' + body.status, 'message: ' + body.message, 'trace_id: ' + body.trace_id))),",
            "     abort: true) ~> AssertNoFailures",
            "AssertNoFailures foldDown(unroll(body.items.details),",
            "     mapColumn(",
            "          columnName = body.items.details.columnName,",
            "          domain = body.items.details.domain,",
            "          algorithm = body.items.details.algorithm,",
            "          confidence = body.items.details.confidence,",
            "          rowsConsidered = body.items.details.rowsConsidered",
            "     ),",
            "     skipDuplicateMapInputs: false,",
            "     skipDuplicateMapOutputs: false) ~> FlattenDetails",
            "MetadataStoreRead filter(equalsIgnoreCase(dataset, 'SNOWFLAKE')",
            "&& equalsIgnoreCase(specified_database, $DF_SOURCE_DATABASE)",
            "&& equalsIgnoreCase(specified_schema, $DF_SOURCE_SCHEMA)",
            "&& equalsIgnoreCase(identified_table, $DF_SOURCE_TABLE)) ~> FilterRowsToUpdate",
            "FlattenDetails, FilterRowsToUpdate join(columnName <=> identified_column,",
            "     joinType:'inner',",
            "     matchType:'exact',",
            "     ignoreSpaces: false,",
            "     broadcast: 'left')~> JoinDetailsAndMetadata",
            "UpdateProfiledColumns alterRow(updateIf(true())) ~> ChecksBeforeSave",
            "FilterOnlyNewlyProfiledRows derive(last_profiled_updated_timestamp = currentTimestamp()) ~> UpdateProfiledColumns",
            "JoinDetailsAndMetadata filter(!equalsIgnoreCase(domain, profiled_domain)",
            "|| !equalsIgnoreCase(algorithm, profiled_algorithm)",
            "|| rowsConsidered != rows_profiled",
            "|| toDecimal(confidence) != toDecimal(confidence_score)) ~> FilterOnlyNewlyProfiledRows",
            "ChecksBeforeSave sink(allowSchemaDrift: true,",
            "     validateSchema: false,",
            "     input(",
            "          dataset as string,",
            "          specified_database as string,",
            "          specified_schema as string,",
            "          identified_table as string,",
            "          identified_column as string,",
            "          identified_column_type as string,",
            "          identified_column_max_length as integer,",
            "          ordinal_position as integer,",
            "          row_count as long,",
            "          profiled_domain as string,",
            "          profiled_algorithm as string,",
            "          confidence_score as decimal(6,5),",
            "          rows_profiled as long,",
            "          assigned_algorithm as string,",
            "          last_profiled_updated_timestamp as timestamp",
            "     ),",
            "     format: 'table',",
            "     store: 'sqlserver',",
            "     schemaName: ($DF_METADATA_SCHEMA),",
            "     tableName: ($DF_METADATA_RULESET_TABLE),",
            "     insertable: false,",
            "     updateable: true,",
            "     deletable: false,",
            "     upsertable: false,",
            "     keys:(array(\"dataset\", \"specified_database\", \"specified_schema\", \"identified_table\", \"identified_column\")),",
            "     skipKeyWrites:true,",
            "     skipDuplicateMapInputs: true,",
            "     skipDuplicateMapOutputs: true,",
            "     errorHandlingOption: 'stopOnFirstError',",
            "     mapColumn(",
            "          dataset,",
            "          specified_database,",
            "          specified_schema,",
            "          identified_table,",
            "          identified_column,",
            "          identified_column_type,",
            "          identified_column_max_length,",
            "          ordinal_position,",
            "          row_count,",
            "          profiled_domain = domain,",
            "          profiled_algorithm = algorithm,",
            "          confidence_score = confidence,",
            "          rows_profiled = rowsConsidered,",
            "          last_profiled_updated_timestamp",
            "     )) ~> WriteToMetadataStore"
          ]
        }
      },
      "dependsOn": []
    }
  ]
}
